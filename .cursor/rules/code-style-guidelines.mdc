---
description: –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∫–æ–¥–∞ ViridiscaUi LMS - C# —Å–æ–≥–ª–∞—à–µ–Ω–∏—è, Avalonia UI –ø–∞—Ç—Ç–µ—Ä–Ω—ã, ReactiveUI —Å—Ç–∏–ª—å
globs: [
  "**/*.cs",
  "**/*.axaml",
  "**/ViewModels/**/*.cs",
  "**/Views/**/*.cs", 
  "**/Services/**/*.cs",
  "**/Models/**/*.cs"
]
alwaysApply: false
priority: 5
tags: [code-style, csharp, avalonia, reactive-ui, naming]
---
# –°–¢–ê–ù–î–ê–†–¢–´ –ö–û–î–ê - VIRIDISCA LMS

## üéØ –û–ë–©–ò–ï –ü–†–ò–ù–¶–ò–ü–´

### –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:
1. **–ß–∏—Ç–∞–µ–º–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ** - –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–Ω—è—Ç–µ–Ω –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
2. **–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å** - –µ–¥–∏–Ω—ã–π —Å—Ç–∏–ª—å –≤–æ –≤—Å–µ–º –ø—Ä–æ–µ–∫—Ç–µ
3. **–ü—Ä–æ—Å—Ç–æ—Ç–∞** - –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–π –ø—Ä–æ—Å—Ç—ã–µ —Ä–µ—à–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã–º
4. **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å** - –∏–∑–±–µ–≥–∞–π –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
5. **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å** - –≤—Å–µ–≥–¥–∞ –≤–∞–ª–∏–¥–∏—Ä—É–π –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

### –§–∏–ª–æ—Å–æ—Ñ–∏—è –∫–æ–¥–∞:
- **"–ú–µ–Ω—å—à–µ —Å—Ç—Ä–æ–∫ - –ª—É—á—à–µ"** - —Å—Ç—Ä–µ–º–∏—Å—å –∫ –ª–∞–∫–æ–Ω–∏—á–Ω–æ—Å—Ç–∏
- **"Fail fast"** - –±—ã—Å—Ç—Ä–æ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–π –æ—à–∏–±–∫–∏
- **"Single responsibility"** - –æ–¥–∏–Ω –∫–ª–∞—Å—Å = –æ–¥–Ω–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
- **"Don't repeat yourself"** - –∏–∑–±–µ–≥–∞–π –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è

## üìù –ò–ú–ï–ù–û–í–ê–ù–ò–ï

### –ö–ª–∞—Å—Å—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:
```csharp
// ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ
public class StudentService { }
public class CourseInstanceViewModel { }
public interface IAuthService { }
public interface IStudentRepository { }

// ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
public class studentservice { }
public class Course_Instance_VM { }
public interface AuthService { }
```

### –ú–µ—Ç–æ–¥—ã –∏ —Å–≤–æ–π—Å—Ç–≤–∞:
```csharp
// ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ - PascalCase
public string FirstName { get; set; }
public async Task<Student> GetStudentAsync(Guid uid) { }
public bool IsActive { get; set; }

// ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
public string firstName { get; set; }
public async Task<Student> getStudent(Guid uid) { }
public bool is_active { get; set; }
```

### –ü–æ–ª—è –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
```csharp
// ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ - camelCase
private readonly IStudentService _studentService;
private string _currentUserName;
public const int MaxRetryAttempts = 3;

// ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
private readonly IStudentService StudentService;
private string CurrentUserName;
public const int max_retry_attempts = 3;
```

### –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è:
```csharp
// ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ
public enum StudentStatus
{
    Active,
    Inactive,
    Graduated,
    Suspended
}

public const string DefaultConnectionString = "...";
public static readonly TimeSpan DefaultTimeout = TimeSpan.FromMinutes(5);

// ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
public enum studentStatus { active, inactive }
public const string default_connection_string = "...";
```

## üèóÔ∏è –°–¢–†–£–ö–¢–£–†–ê –ö–õ–ê–°–°–û–í

### –ü–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–ª–∞—Å—Å–µ:
```csharp
public class StudentViewModel : ViewModelBase
{
    // 1. –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    private const int MaxStudentsPerPage = 50;
    
    // 2. –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
    private static readonly ILogger Logger = LogManager.GetCurrentClassLogger();
    
    // 3. –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –ø–æ–ª—è
    private readonly IStudentService _studentService;
    private readonly ObservableAsPropertyHelper<bool> _isLoading;
    
    // 4. –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã
    public StudentViewModel(IStudentService studentService)
    {
        _studentService = studentService;
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...
    }
    
    // 5. –ü—É–±–ª–∏—á–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    [Reactive] public string SearchText { get; set; } = string.Empty;
    [Reactive] public Student? SelectedStudent { get; set; }
    
    // 6. –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    public bool IsLoading => _isLoading.Value;
    
    // 7. –ö–æ–º–∞–Ω–¥—ã
    public ReactiveCommand<Unit, Unit> LoadStudentsCommand { get; }
    public ReactiveCommand<Student, Unit> DeleteStudentCommand { get; }
    
    // 8. –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    public async Task RefreshAsync() { }
    
    // 9. –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    private async Task LoadStudentsAsync() { }
    private bool CanDeleteStudent(Student student) => student != null;
}
```

## üé® AVALONIA UI –°–¢–ò–õ–¨

### AXAML —Ñ–∞–π–ª—ã:
```xml
<!-- ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ - –æ—Ç—Å—Ç—É–ø—ã 2 –ø—Ä–æ–±–µ–ª–∞, –∞—Ç—Ä–∏–±—É—Ç—ã –Ω–∞ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ -->
<UserControl x:Class="ViridiscaUi.Views.Education.StudentsView"
             xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:vm="using:ViridiscaUi.ViewModels.Education"
             x:DataType="vm:StudentsViewModel">
  
  <Grid RowDefinitions="Auto,*,Auto">
    <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
    <Border Grid.Row="0" Classes="page-header">
      <TextBlock Text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏" 
                 Classes="page-title" />
    </Border>
    
    <!-- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ -->
    <ScrollViewer Grid.Row="1" Classes="page-content">
      <StackPanel Spacing="16">
        <!-- –ü–æ–∏—Å–∫ -->
        <TextBox Text="{Binding SearchText}"
                 Watermark="–ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤..."
                 Classes="search-input" />
        
        <!-- –°–ø–∏—Å–æ–∫ -->
        <ItemsControl ItemsSource="{Binding Students}">
          <ItemsControl.ItemTemplate>
            <DataTemplate>
              <Border Classes="student-card">
                <TextBlock Text="{Binding FullName}" />
              </Border>
            </DataTemplate>
          </ItemsControl.ItemTemplate>
        </ItemsControl>
      </StackPanel>
    </ScrollViewer>
    
    <!-- –§—É—Ç–µ—Ä -->
    <Border Grid.Row="2" Classes="page-footer">
      <Button Content="–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞"
              Command="{Binding AddStudentCommand}"
              Classes="btn-primary" />
    </Border>
  </Grid>
</UserControl>
```

### –ü—Ä–∏–≤—è–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:
```xml
<!-- ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ -->
<TextBox Text="{Binding FirstName, Mode=TwoWay}" />
<Button Command="{Binding SaveCommand}" 
        CommandParameter="{Binding SelectedStudent}" />
<TextBlock Text="{Binding Student.FullName, FallbackValue='–ù–µ —É–∫–∞–∑–∞–Ω–æ'}" />

<!-- ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ -->
<TextBox Text="{Binding FirstName}" />  <!-- –ù–µ—Ç Mode=TwoWay -->
<Button Command="{Binding SaveCommand, Mode=OneWay}" />  <!-- –õ–∏—à–Ω–∏–π Mode -->
```

### –°—Ç–∏–ª–∏ –∏ –∫–ª–∞—Å—Å—ã:
```xml
<!-- ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–π CSS-–ø–æ–¥–æ–±–Ω—ã–µ –∫–ª–∞—Å—Å—ã -->
<Button Classes="btn btn-primary btn-lg" />
<TextBox Classes="form-input error" />
<Border Classes="card card-hover" />

<!-- ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ - –∏–∑–±–µ–≥–∞–π inline —Å—Ç–∏–ª–µ–π -->
<Button Background="Blue" Foreground="White" Padding="16,12" />
```

## ‚ö° REACTIVE UI –ü–ê–¢–¢–ï–†–ù–´

### ViewModels —Å ReactiveUI:
```csharp
public class StudentEditorViewModel : ReactiveObject
{
    // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–π [Reactive] –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Å–≤–æ–π—Å—Ç–≤
    [Reactive] public string FirstName { get; set; } = string.Empty;
    [Reactive] public string LastName { get; set; } = string.Empty;
    [Reactive] public string Email { get; set; } = string.Empty;
    
    // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ - ObservableAsPropertyHelper –¥–ª—è –≤—ã—á–∏—Å–ª—è–µ–º—ã—Ö —Å–≤–æ–π—Å—Ç–≤
    private readonly ObservableAsPropertyHelper<string> _fullName;
    public string FullName => _fullName.Value;
    
    private readonly ObservableAsPropertyHelper<bool> _isValid;
    public bool IsValid => _isValid.Value;
    
    public StudentEditorViewModel()
    {
        // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        _fullName = this.WhenAnyValue(
                x => x.FirstName, 
                x => x.LastName,
                (first, last) => $"{first} {last}".Trim())
            .ToProperty(this, x => x.FullName);
            
        _isValid = this.WhenAnyValue(
                x => x.FirstName,
                x => x.LastName, 
                x => x.Email,
                (first, last, email) => 
                    !string.IsNullOrWhiteSpace(first) &&
                    !string.IsNullOrWhiteSpace(last) &&
                    IsValidEmail(email))
            .ToProperty(this, x => x.IsValid);
        
        // –ö–æ–º–∞–Ω–¥—ã —Å —É—Å–ª–æ–≤–∏—è–º–∏
        SaveCommand = ReactiveCommand.CreateFromTask(
            SaveAsync,
            this.WhenAnyValue(x => x.IsValid));
            
        CancelCommand = ReactiveCommand.Create(Cancel);
    }
    
    public ReactiveCommand<Unit, Unit> SaveCommand { get; }
    public ReactiveCommand<Unit, Unit> CancelCommand { get; }
    
    private async Task SaveAsync()
    {
        // –õ–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    }
    
    private void Cancel()
    {
        // –õ–æ–≥–∏–∫–∞ –æ—Ç–º–µ–Ω—ã
    }
    
    private static bool IsValidEmail(string email)
    {
        return !string.IsNullOrWhiteSpace(email) && 
               email.Contains('@') && 
               email.Contains('.');
    }
}
```

### –ö–æ–º–∞–Ω–¥—ã –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:
```csharp
// ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
public ReactiveCommand<Unit, IEnumerable<Student>> LoadStudentsCommand { get; }
public ReactiveCommand<Student, Unit> DeleteStudentCommand { get; }

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
LoadStudentsCommand = ReactiveCommand.CreateFromTask(LoadStudentsAsync);

DeleteStudentCommand = ReactiveCommand.CreateFromTask<Student>(
    DeleteStudentAsync,
    this.WhenAnyValue(x => x.SelectedStudent, student => student != null));

// ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–ª–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
public ReactiveCommand<Unit, Unit> LoadStudentsCommand { get; }

LoadStudentsCommand = ReactiveCommand.Create(() => {
    // –î–æ–ª–≥–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è - –ü–õ–û–•–û!
    var students = _studentService.GetAllStudents();
    Students.Clear();
    Students.AddRange(students);
});
```

## üîß –°–ï–†–í–ò–°–´ –ò DEPENDENCY INJECTION

### –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Å–µ—Ä–≤–∏—Å–æ–≤:
```csharp
// ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ
public interface IStudentService
{
    Task<IEnumerable<Student>> GetAllAsync();
    Task<Student?> GetByUidAsync(Guid uid);
    Task<Student> CreateAsync(Student student);
    Task<Student> UpdateAsync(Student student);
    Task DeleteAsync(Guid uid);
    Task<bool> ExistsAsync(Guid uid);
}

// ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ - —Å–º–µ—à–∏–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
public interface IStudentService
{
    IEnumerable<Student> GetAll();  // –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
    Task<Student?> GetByUidAsync(Guid uid);  // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
    void Create(Student student);  // Void –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞
}
```

### –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤:
```csharp
public class StudentService : IStudentService
{
    private readonly ApplicationDbContext _context;
    private readonly ILogger<StudentService> _logger;
    
    public StudentService(
        ApplicationDbContext context,
        ILogger<StudentService> logger)
    {
        _context = context ?? throw new ArgumentNullException(nameof(context));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }
    
    public async Task<IEnumerable<Student>> GetAllAsync()
    {
        try
        {
            _logger.LogInformation("–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤");
            
            return await _context.Students
                .Include(s => s.Group)
                .Include(s => s.Person)
                .Where(s => !s.IsDeleted)
                .OrderBy(s => s.Person.LastName)
                .ThenBy(s => s.Person.FirstName)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤");
            throw;
        }
    }
    
    public async Task<Student> CreateAsync(Student student)
    {
        ArgumentNullException.ThrowIfNull(student);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (string.IsNullOrWhiteSpace(student.StudentCode))
            throw new ArgumentException("–ö–æ–¥ —Å—Ç—É–¥–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω", nameof(student));
            
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        var exists = await _context.Students
            .AnyAsync(s => s.StudentCode == student.StudentCode);
            
        if (exists)
            throw new InvalidOperationException($"–°—Ç—É–¥–µ–Ω—Ç —Å –∫–æ–¥–æ–º {student.StudentCode} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
        
        try
        {
            student.Uid = Guid.NewGuid();
            student.CreatedAt = DateTime.UtcNow;
            
            _context.Students.Add(student);
            await _context.SaveChangesAsync();
            
            _logger.LogInformation("–°–æ–∑–¥–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç {StudentCode}", student.StudentCode);
            return student;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ {StudentCode}", student.StudentCode);
            throw;
        }
    }
}
```

## üìä –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–•

### Entity –∫–ª–∞—Å—Å—ã:
```csharp
// ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ
public class Student : IAuditable, ISoftDeletable
{
    public Guid Uid { get; set; }
    public Guid PersonUid { get; set; }
    public string StudentCode { get; set; } = string.Empty;
    public Guid? GroupUid { get; set; }
    public Guid? CurriculumUid { get; set; }
    public decimal GPA { get; set; }
    public StudentStatus Status { get; set; }
    public DateTime EnrollmentDate { get; set; }
    public DateTime? GraduationDate { get; set; }
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    public Person Person { get; set; } = null!;
    public Group? Group { get; set; }
    public Curriculum? Curriculum { get; set; }
    public ICollection<Enrollment> Enrollments { get; set; } = new List<Enrollment>();
    public ICollection<Grade> Grades { get; set; } = new List<Grade>();
    
    // –ê—É–¥–∏—Ç
    public DateTime CreatedAt { get; set; }
    public DateTime? LastModifiedAt { get; set; }
    public bool IsDeleted { get; set; }
    public DateTime? DeletedAt { get; set; }
}

// ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ int Id –≤–º–µ—Å—Ç–æ Guid Uid
public class Student
{
    public int Id { get; set; }  // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å Guid Uid
    public string Name { get; set; }  // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–æ –Ω–∞ FirstName/LastName
    // –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
}
```

### ViewModels –¥–ª—è —Ñ–æ—Ä–º:
```csharp
public class StudentFormViewModel : ReactiveObject, IValidatableObject
{
    [Reactive] public string FirstName { get; set; } = string.Empty;
    [Reactive] public string LastName { get; set; } = string.Empty;
    [Reactive] public string Email { get; set; } = string.Empty;
    [Reactive] public string StudentCode { get; set; } = string.Empty;
    [Reactive] public Guid? SelectedGroupUid { get; set; }
    
    // –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
    public ObservableCollection<Group> AvailableGroups { get; } = new();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        if (string.IsNullOrWhiteSpace(FirstName))
            yield return new ValidationResult("–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ", new[] { nameof(FirstName) });
            
        if (string.IsNullOrWhiteSpace(LastName))
            yield return new ValidationResult("–§–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞", new[] { nameof(LastName) });
            
        if (string.IsNullOrWhiteSpace(Email) || !IsValidEmail(Email))
            yield return new ValidationResult("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email", new[] { nameof(Email) });
            
        if (string.IsNullOrWhiteSpace(StudentCode))
            yield return new ValidationResult("–ö–æ–¥ —Å—Ç—É–¥–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω", new[] { nameof(StudentCode) });
    }
    
    private static bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }
}
```

## üö® –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö

### Try-catch –ø–∞—Ç—Ç–µ—Ä–Ω—ã:
```csharp
// ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ - —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
public async Task<Student> GetStudentAsync(Guid uid)
{
    try
    {
        var student = await _context.Students
            .Include(s => s.Person)
            .FirstOrDefaultAsync(s => s.Uid == uid);
            
        return student ?? throw new NotFoundException($"–°—Ç—É–¥–µ–Ω—Ç —Å ID {uid} –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    catch (NotFoundException)
    {
        throw; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –±–∏–∑–Ω–µ—Å-–∏—Å–∫–ª—é—á–µ–Ω–∏—è
    }
    catch (Exception ex)
    {
        _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ {StudentUid}", uid);
        throw new ServiceException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞", ex);
    }
}

// ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ - –æ–±—â–∏–π catch
public async Task<Student> GetStudentAsync(Guid uid)
{
    try
    {
        // –∫–æ–¥...
    }
    catch (Exception ex)
    {
        // –ü–æ–≥–ª–æ—â–∞–µ–º –≤—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è - –ü–õ–û–•–û!
        _logger.LogError(ex, "–û—à–∏–±–∫–∞");
        return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤–º–µ—Å—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    }
}
```

### –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:
```csharp
// ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ
public async Task<Student> CreateStudentAsync(CreateStudentRequest request)
{
    ArgumentNullException.ThrowIfNull(request);
    
    if (string.IsNullOrWhiteSpace(request.FirstName))
        throw new ArgumentException("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", nameof(request.FirstName));
        
    if (string.IsNullOrWhiteSpace(request.StudentCode))
        throw new ArgumentException("–ö–æ–¥ —Å—Ç—É–¥–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω", nameof(request.StudentCode));
        
    if (request.GroupUid == Guid.Empty)
        throw new ArgumentException("–ì—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞", nameof(request.GroupUid));
    
    // –ë–∏–∑–Ω–µ—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è
    var groupExists = await _context.Groups.AnyAsync(g => g.Uid == request.GroupUid);
    if (!groupExists)
        throw new ValidationException($"–ì—Ä—É–ø–ø–∞ —Å ID {request.GroupUid} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
    
    // –°–æ–∑–¥–∞–Ω–∏–µ...
}
```

## üìã –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò –ò –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø

### XML –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:
```csharp
/// <summary>
/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –≤ —Å–∏—Å—Ç–µ–º–µ LMS
/// </summary>
public class StudentService : IStudentService
{
    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
    /// </summary>
    /// <param name="student">–î–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è</param>
    /// <returns>–°–æ–∑–¥–∞–Ω–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç —Å –ø—Ä–∏—Å–≤–æ–µ–Ω–Ω—ã–º Uid</returns>
    /// <exception cref="ArgumentNullException">–ï—Å–ª–∏ student —Ä–∞–≤–µ–Ω null</exception>
    /// <exception cref="ValidationException">–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã</exception>
    /// <exception cref="DuplicateException">–ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</exception>
    public async Task<Student> CreateAsync(Student student)
    {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è...
    }
}
```

### –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –∫–æ–¥–µ:
```csharp
// ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ - –æ–±—ä—è—Å–Ω—è–π –ü–û–ß–ï–ú–£, –∞ –Ω–µ –ß–¢–û
public async Task<decimal> CalculateGPAAsync(Guid studentUid)
{
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ GPA
    // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Å–æ–≥–ª–∞—Å–Ω–æ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–º –ø—Ä–∞–≤–∏–ª–∞–º
    var finalGrades = await _context.Grades
        .Where(g => g.StudentUid == studentUid && g.Type == GradeType.Final)
        .ToListAsync();
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫—É—Ä—Å—ã –±–µ–∑ –æ—Ü–µ–Ω–æ–∫ (—Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –∫—É—Ä—Å)
    var completedGrades = finalGrades.Where(g => g.Value.HasValue);
    
    return completedGrades.Any() 
        ? completedGrades.Average(g => g.Value!.Value)
        : 0m;
}

// ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ - –æ—á–µ–≤–∏–¥–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
public async Task<Student> GetStudentAsync(Guid uid)
{
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ ID
    var student = await _context.Students.FindAsync(uid);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
    return student;
}
```

## üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï

### Unit —Ç–µ—Å—Ç—ã:
```csharp
[Test]
public async Task CreateAsync_ValidStudent_ReturnsStudentWithUid()
{
    // Arrange
    var student = new Student
    {
        StudentCode = "ST001",
        PersonUid = Guid.NewGuid(),
        GroupUid = _existingGroupUid,
        Status = StudentStatus.Active
    };
    
    // Act
    var result = await _studentService.CreateAsync(student);
    
    // Assert
    Assert.That(result.Uid, Is.Not.EqualTo(Guid.Empty));
    Assert.That(result.StudentCode, Is.EqualTo("ST001"));
    Assert.That(result.CreatedAt, Is.Not.EqualTo(default(DateTime)));
}

[Test]
public void CreateAsync_NullStudent_ThrowsArgumentNullException()
{
    // Act & Assert
    Assert.ThrowsAsync<ArgumentNullException>(
        () => _studentService.CreateAsync(null!));
}
```

---

**–°–ª–µ–¥–æ–≤–∞–Ω–∏–µ —ç—Ç–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞, –µ–≥–æ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç—å –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ.** 