using System;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reactive;
using System.Reactive.Linq;
using System.Threading.Tasks;
using ReactiveUI;
using ReactiveUI.Fody.Helpers;
using ViridiscaUi.Domain.Models.Education;
using ViridiscaUi.Infrastructure.Navigation;
using ViridiscaUi.Services.Interfaces;
using ViridiscaUi.ViewModels;
using ViridiscaUi.ViewModels.Bases.Navigations;

namespace ViridiscaUi.ViewModels.Education;

/// <summary>
/// ViewModel –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
/// </summary>
[Route("teacher-editor", DisplayName = "–†–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π", IconKey = "üë®‚Äçüè´", Order = 202, RequiredRoles = new[] { "Admin" })]
public class TeacherEditorViewModel : RoutableViewModelBase
{
    private readonly ITeacherService _teacherService;
    private readonly IUnifiedNavigationService _navigationService;
    private readonly IDialogService _dialogService;

    #region Properties

    /// <summary>
    /// –§–ª–∞–≥ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (true) –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è (false)
    /// </summary>
    [Reactive] public bool IsEditMode { get; set; }

    /// <summary>
    /// –¢–µ–∫—É—â–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
    /// </summary>
    [Reactive] public Teacher? CurrentTeacher { get; set; }

    /// <summary>
    /// –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    /// </summary>
    [Reactive] public Guid? TeacherId { get; set; }

    // –ü–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    [Reactive] public string FirstName { get; set; } = string.Empty;
    [Reactive] public string LastName { get; set; } = string.Empty;
    [Reactive] public string MiddleName { get; set; } = string.Empty;
    [Reactive] public string Email { get; set; } = string.Empty;
    [Reactive] public string PhoneNumber { get; set; } = string.Empty;
    [Reactive] public string Position { get; set; } = string.Empty;
    [Reactive] public string AcademicDegree { get; set; } = string.Empty;
    [Reactive] public string AcademicTitle { get; set; } = string.Empty;
    [Reactive] public int Experience { get; set; } = 0;
    [Reactive] public string Specialization { get; set; } = string.Empty;
    [Reactive] public string Biography { get; set; } = string.Empty;

    /// <summary>
    /// –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
    /// </summary>
    [Reactive] public ObservableCollection<string> AvailableDepartments { get; set; } = new();

    /// <summary>
    /// –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    /// </summary>
    [Reactive] public ObservableCollection<string> AvailablePositions { get; set; } = new();

    /// <summary>
    /// –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —É—á–µ–Ω—ã–µ —Å—Ç–µ–ø–µ–Ω–∏
    /// </summary>
    [Reactive] public ObservableCollection<string> AvailableDegrees { get; set; } = new();

    /// <summary>
    /// –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —É—á–µ–Ω—ã–µ –∑–≤–∞–Ω–∏—è
    /// </summary>
    [Reactive] public ObservableCollection<string> AvailableTitles { get; set; } = new();

    /// <summary>
    /// –§–ª–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    /// </summary>
    [Reactive] public bool IsSaving { get; set; }

    /// <summary>
    /// –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º—ã
    /// </summary>
    [Reactive] public string FormTitle { get; set; } = "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è";

    [Reactive] public ObservableCollection<string> Departments { get; set; } = new();
    [Reactive] public string? SelectedDepartment { get; set; }

    #endregion

    #region Commands

    /// <summary>
    /// –ö–æ–º–∞–Ω–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    /// </summary>
    public ReactiveCommand<Unit, Unit> SaveCommand { get; set; } = null!;

    /// <summary>
    /// –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã
    /// </summary>
    public ReactiveCommand<Unit, Unit> CancelCommand { get; set; } = null!;

    /// <summary>
    /// –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    /// </summary>
    public ReactiveCommand<Unit, Unit> DeleteCommand { get; set; } = null!;

    /// <summary>
    /// –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    /// </summary>
    public ReactiveCommand<Unit, Unit> CreateNewCommand { get; set; } = null!;

    #endregion

    /// <summary>
    /// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    /// </summary>
    public TeacherEditorViewModel(
        IScreen hostScreen,
        ITeacherService teacherService,
        IUnifiedNavigationService navigationService,
        IDialogService dialogService) : base(hostScreen)
    {
        _teacherService = teacherService ?? throw new ArgumentNullException(nameof(teacherService));
        _navigationService = navigationService ?? throw new ArgumentNullException(nameof(navigationService));
        _dialogService = dialogService ?? throw new ArgumentNullException(nameof(dialogService));

        InitializeCommands();
        InitializePredefinedValues();
    }

    #region Lifecycle Methods

    /// <summary>
    /// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ ViewModel
    /// </summary>
    protected override async Task OnFirstTimeLoadedAsync()
    {
        await base.OnFirstTimeLoadedAsync();
        
        if (CurrentTeacher != null)
        {
            await LoadTeacherDataAsync(CurrentTeacher.Uid);
        }
        else
        {
            SetupForCreation();
        }
    }

    #endregion

    #region Private Methods

    private void InitializeCommands()
    {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—ã
        var canSave = this.WhenAnyValue(
            x => x.FirstName,
            x => x.LastName,
            x => x.Email,
            x => x.SelectedDepartment,
            x => x.Position,
            x => x.IsSaving,
            (firstName, lastName, email, department, position, isSaving) =>
                !string.IsNullOrWhiteSpace(firstName) &&
                !string.IsNullOrWhiteSpace(lastName) &&
                !string.IsNullOrWhiteSpace(email) &&
                department != null &&
                !string.IsNullOrWhiteSpace(position) &&
                !isSaving);

        SaveCommand = CreateCommand(SaveAsync, canSave, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è");
        CancelCommand = CreateCommand(CancelAsync, null, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ");
        
        var canDelete = this.WhenAnyValue(x => x.IsEditMode, x => x.IsSaving, 
            (isEdit, isSaving) => isEdit && !isSaving);
        DeleteCommand = CreateCommand(DeleteAsync, canDelete, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è");
        
        CreateNewCommand = CreateCommand(CreateNewAsync, null, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è");
    }

    private void InitializePredefinedValues()
    {
        // –î–æ–ª–∂–Ω–æ—Å—Ç–∏
        var positions = new[]
        {
            "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç",
            "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", 
            "–°—Ç–∞—Ä—à–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å",
            "–î–æ—Ü–µ–Ω—Ç",
            "–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä",
            "–ó–∞–≤–µ–¥—É—é—â–∏–π –∫–∞—Ñ–µ–¥—Ä–æ–π"
        };
        AvailablePositions.Clear();
        foreach (var position in positions)
        {
            AvailablePositions.Add(position);
        }

        // –£—á–µ–Ω—ã–µ —Å—Ç–µ–ø–µ–Ω–∏
        var degrees = new[]
        {
            "",
            "–ö–∞–Ω–¥–∏–¥–∞—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫",
            "–ö–∞–Ω–¥–∏–¥–∞—Ç —Ñ–∏–∑–∏–∫–æ-–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫",
            "–ö–∞–Ω–¥–∏–¥–∞—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫",
            "–ö–∞–Ω–¥–∏–¥–∞—Ç –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫",
            "–î–æ–∫—Ç–æ—Ä —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫",
            "–î–æ–∫—Ç–æ—Ä —Ñ–∏–∑–∏–∫–æ-–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫",
            "–î–æ–∫—Ç–æ—Ä —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫",
            "–î–æ–∫—Ç–æ—Ä –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫"
        };
        AvailableDegrees.Clear();
        foreach (var degree in degrees)
        {
            AvailableDegrees.Add(degree);
        }

        // –£—á–µ–Ω—ã–µ –∑–≤–∞–Ω–∏—è
        var titles = new[]
        {
            "",
            "–î–æ—Ü–µ–Ω—Ç",
            "–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä"
        };
        AvailableTitles.Clear();
        foreach (var title in titles)
        {
            AvailableTitles.Add(title);
        }
    }

    private async Task LoadTeacherDataAsync(Guid teacherId)
    {
        try
        {
            ShowInfo("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è...");
            
            var teacher = await _teacherService.GetTeacherAsync(teacherId);
            if (teacher == null)
            {
                SetError("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
                await _navigationService.GoBackAsync();
                return;
            }

            CurrentTeacher = teacher;
            PopulateForm(teacher);
            
            ShowSuccess("–î–∞–Ω–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
            LogInfo("Loaded teacher: {TeacherName}", $"{teacher.LastName} {teacher.FirstName}");
        }
        catch (Exception ex)
        {
            SetError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", ex);
        }
    }

    private void PopulateForm(Teacher teacher)
    {
        FirstName = teacher.FirstName;
        LastName = teacher.LastName;
        MiddleName = teacher.MiddleName;
        // Email –∏ PhoneNumber - read-only —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ User
        // Position - read-only —Å–≤–æ–π—Å—Ç–≤–æ
        AcademicDegree = teacher.AcademicDegree ?? string.Empty;
        AcademicTitle = teacher.AcademicTitle ?? string.Empty;
        Specialization = teacher.Specialization ?? string.Empty;
        // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
    }

    private void SetupForCreation()
    {
        CurrentTeacher = null;
        ClearForm();
    }

    private void ClearForm()
    {
        FirstName = string.Empty;
        LastName = string.Empty;
        MiddleName = string.Empty;
        Email = string.Empty;
        PhoneNumber = string.Empty;
        SelectedDepartment = null;
        Position = string.Empty;
        AcademicDegree = string.Empty;
        AcademicTitle = string.Empty;
        Experience = 0;
        Specialization = string.Empty;
        Biography = string.Empty;
    }

    private async Task SaveAsync()
    {
        try
        {
            IsSaving = true;
            ClearError();

            if (IsEditMode && CurrentTeacher != null)
            {
                await UpdateTeacherAsync();
            }
            else
            {
                await CreateTeacherAsync();
            }

            ShowSuccess(IsEditMode ? "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω" : "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω");
            await _navigationService.NavigateToAsync("teachers");
        }
        catch (Exception ex)
        {
            SetError($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {ex.Message}", ex);
        }
        finally
        {
            IsSaving = false;
        }
    }

    private async Task UpdateTeacherAsync()
    {
        if (CurrentTeacher == null) return;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ settable —Å–≤–æ–π—Å—Ç–≤–∞
        CurrentTeacher.FirstName = FirstName.Trim();
        CurrentTeacher.LastName = LastName.Trim();
        CurrentTeacher.MiddleName = string.IsNullOrWhiteSpace(MiddleName) ? string.Empty : MiddleName.Trim();
        CurrentTeacher.AcademicDegree = string.IsNullOrWhiteSpace(AcademicDegree) ? string.Empty : AcademicDegree.Trim();
        CurrentTeacher.AcademicTitle = string.IsNullOrWhiteSpace(AcademicTitle) ? string.Empty : AcademicTitle.Trim();
        CurrentTeacher.Specialization = string.IsNullOrWhiteSpace(Specialization) ? string.Empty : Specialization.Trim();

        await _teacherService.UpdateTeacherAsync(CurrentTeacher);
        LogInfo("Updated teacher: {TeacherName}", $"{CurrentTeacher.LastName} {CurrentTeacher.FirstName}");
    }

    private async Task CreateTeacherAsync()
    {
        var newTeacher = new Teacher(
            employeeCode: $"T{DateTime.Now:yyyyMMddHHmmss}",
            userUid: Guid.Empty, // Temporary
            hireDate: DateTime.Now,
            specialization: Specialization.Trim(),
            hourlyRate: 1000m,
            lastName: LastName.Trim(),
            firstName: FirstName.Trim(),
            middleName: string.IsNullOrWhiteSpace(MiddleName) ? null : MiddleName.Trim(),
            academicDegree: string.IsNullOrWhiteSpace(AcademicDegree) ? null : AcademicDegree.Trim(),
            academicTitle: string.IsNullOrWhiteSpace(AcademicTitle) ? null : AcademicTitle.Trim()
        );

        await _teacherService.CreateTeacherAsync(newTeacher);
        LogInfo("Created teacher: {TeacherName}", $"{newTeacher.LastName} {newTeacher.FirstName}");
    }

    private async Task DeleteAsync()
    {
        if (CurrentTeacher == null) return;

        try
        {
            IsSaving = true;
            
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            await _teacherService.DeleteTeacherAsync(CurrentTeacher.Uid);
            
            ShowSuccess("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω");
            LogInfo("Deleted teacher: {TeacherName}", $"{CurrentTeacher.LastName} {CurrentTeacher.FirstName}");
            
            await _navigationService.NavigateToAsync("teachers");
        }
        catch (Exception ex)
        {
            SetError($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {ex.Message}", ex);
        }
        finally
        {
            IsSaving = false;
        }
    }

    private async Task CancelAsync()
    {
        await _navigationService.GoBackAsync();
    }

    private async Task CreateNewAsync()
    {
        SetupForCreation();
        IsEditMode = false;
        FormTitle = "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è";
        ClearError();
    }

    #endregion
} 