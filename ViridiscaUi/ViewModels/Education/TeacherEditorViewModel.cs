using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reactive;
using System.Reactive.Linq;
using System.Threading.Tasks;
using ReactiveUI;
using ReactiveUI.Fody.Helpers;
using ViridiscaUi.Domain.Models.Education;
using ViridiscaUi.Domain.Models.Education.Enums;
using ViridiscaUi.Infrastructure.Navigation;
using ViridiscaUi.Services.Interfaces;
using ViridiscaUi.ViewModels;
using ViridiscaUi.ViewModels.Bases.Navigations;
using ViridiscaUi.Domain.Models.Auth;

namespace ViridiscaUi.ViewModels.Education;

/// <summary>
/// ViewModel –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
/// </summary>
[Route("teacher-editor", DisplayName = "–†–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π", IconKey = "üë®‚Äçüè´", Order = 202, RequiredRoles = new[] { "Admin" })]
public class TeacherEditorViewModel : RoutableViewModelBase
{
    private readonly ITeacherService _teacherService;
    private readonly IUnifiedNavigationService _navigationService;
    private readonly IDialogService _dialogService;

    #region Properties

    /// <summary>
    /// –§–ª–∞–≥ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (true) –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è (false)
    /// </summary>
    [Reactive] public bool IsEditMode { get; set; }

    /// <summary>
    /// –¢–µ–∫—É—â–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
    /// </summary>
    [Reactive] public Teacher? CurrentTeacher { get; set; }

    /// <summary>
    /// –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    /// </summary>
    [Reactive] public Guid? TeacherId { get; set; }

    // –ü–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    [Reactive] public string FirstName { get; set; } = string.Empty;
    [Reactive] public string LastName { get; set; } = string.Empty;
    [Reactive] public string MiddleName { get; set; } = string.Empty;
    [Reactive] public string Email { get; set; } = string.Empty;
    [Reactive] public string PhoneNumber { get; set; } = string.Empty;
    [Reactive] public string Position { get; set; } = string.Empty;
    [Reactive] public string AcademicDegree { get; set; } = string.Empty;
    [Reactive] public string AcademicTitle { get; set; } = string.Empty;
    [Reactive] public int Experience { get; set; } = 0;
    [Reactive] public string Specialization { get; set; } = string.Empty;
    [Reactive] public string Biography { get; set; } = string.Empty;

    /// <summary>
    /// –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
    /// </summary>
    [Reactive] public ObservableCollection<string> AvailableDepartments { get; set; } = new();

    /// <summary>
    /// –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    /// </summary>
    [Reactive] public ObservableCollection<string> AvailablePositions { get; set; } = new();

    /// <summary>
    /// –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —É—á–µ–Ω—ã–µ —Å—Ç–µ–ø–µ–Ω–∏
    /// </summary>
    [Reactive] public ObservableCollection<string> AvailableDegrees { get; set; } = new();

    /// <summary>
    /// –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —É—á–µ–Ω—ã–µ –∑–≤–∞–Ω–∏—è
    /// </summary>
    [Reactive] public ObservableCollection<string> AvailableTitles { get; set; } = new();

    /// <summary>
    /// –§–ª–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    /// </summary>
    [Reactive] public bool IsSaving { get; set; }

    /// <summary>
    /// –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º—ã
    /// </summary>
    [Reactive] public string FormTitle { get; set; } = "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è";

    [Reactive] public ObservableCollection<string> Departments { get; set; } = new();
    [Reactive] public string? SelectedDepartment { get; set; }

    // Additional properties for dialogs
    [Reactive] public string EmployeeCode { get; set; } = string.Empty;
    [Reactive] public string Phone { get; set; } = string.Empty;
    [Reactive] public DateTime? BirthDate { get; set; }
    [Reactive] public string OfficeNumber { get; set; } = string.Empty;
    [Reactive] public string Address { get; set; } = string.Empty;
    [Reactive] public DateTime HireDate { get; set; } = DateTime.Today;
    [Reactive] public DateTime? TerminationDate { get; set; }
    [Reactive] public TeacherStatus Status { get; set; } = TeacherStatus.Active;
    [Reactive] public decimal HourlyRate { get; set; } = 0;
    [Reactive] public string DepartmentName { get; set; } = string.Empty;

    // Computed properties for details dialog
    public string FullName => $"{LastName} {FirstName} {MiddleName}".Trim();
    public bool IsTerminated => Status == TeacherStatus.Terminated;
    
    // Statistics properties for details dialog
    [Reactive] public int CoursesCount { get; set; } = 0;
    [Reactive] public int GroupsCount { get; set; } = 0;
    [Reactive] public int StudentsCount { get; set; } = 0;
    [Reactive] public double AverageRating { get; set; } = 0.0;
    [Reactive] public string WorkExperience { get; set; } = "0 –ª–µ—Ç";
    [Reactive] public int ActiveCoursesCount { get; set; } = 0;
    [Reactive] public int TotalStudentsCount { get; set; } = 0;
    [Reactive] public double AverageCourseRating { get; set; } = 0.0;
    [Reactive] public int CompletedCoursesCount { get; set; } = 0;
    [Reactive] public int PublicationsCount { get; set; } = 0;
    
    // Collections for details dialog
    [Reactive] public ObservableCollection<CourseInstance> CourseInstances { get; set; } = new();
    [Reactive] public ObservableCollection<Group> CuratedGroups { get; set; } = new();
    
    // Computed properties for collections
    public bool HasCourses => CourseInstances.Any();
    public bool HasGroups => CuratedGroups.Any();

    #endregion

    #region Commands

    /// <summary>
    /// –ö–æ–º–∞–Ω–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    /// </summary>
    public ReactiveCommand<Unit, Unit> SaveCommand { get; set; } = null!;

    /// <summary>
    /// –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã
    /// </summary>
    public ReactiveCommand<Unit, Unit> CancelCommand { get; set; } = null!;

    /// <summary>
    /// –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    /// </summary>
    public ReactiveCommand<Unit, Unit> DeleteCommand { get; set; } = null!;

    /// <summary>
    /// –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    /// </summary>
    public ReactiveCommand<Unit, Unit> CreateNewCommand { get; set; } = null!;

    /// <summary>
    /// –ö–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –¥–µ—Ç–∞–ª–µ–π)
    /// </summary>
    public ReactiveCommand<Unit, Unit> EditCommand { get; set; } = null!;

    /// <summary>
    /// –ö–æ–º–∞–Ω–¥–∞ –∑–∞–∫—Ä—ã—Ç–∏—è (–¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –¥–µ—Ç–∞–ª–µ–π)
    /// </summary>
    public ReactiveCommand<Unit, Unit> CloseCommand { get; set; } = null!;

    /// <summary>
    /// –ö–æ–º–∞–Ω–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    /// </summary>
    public ReactiveCommand<Unit, Unit> GenerateEmployeeCodeCommand { get; set; } = null!;

    /// <summary>
    /// –ö–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞–º–∏
    /// </summary>
    public ReactiveCommand<Unit, Unit> ManageCoursesCommand { get; set; } = null!;

    /// <summary>
    /// –ö–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏
    /// </summary>
    public ReactiveCommand<Unit, Unit> ManageGroupsCommand { get; set; } = null!;

    /// <summary>
    /// –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    /// </summary>
    public ReactiveCommand<Unit, Unit> ViewStatisticsCommand { get; set; } = null!;

    /// <summary>
    /// –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    /// </summary>
    public ReactiveCommand<Unit, Unit> SendMessageCommand { get; set; } = null!;

    #endregion

    /// <summary>
    /// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    /// </summary>
    public TeacherEditorViewModel(
        IScreen hostScreen,
        ITeacherService teacherService,
        IUnifiedNavigationService navigationService,
        IDialogService dialogService) : base(hostScreen)
    {
        _teacherService = teacherService ?? throw new ArgumentNullException(nameof(teacherService));
        _navigationService = navigationService ?? throw new ArgumentNullException(nameof(navigationService));
        _dialogService = dialogService ?? throw new ArgumentNullException(nameof(dialogService));

        InitializeCommands();
        InitializePredefinedValues();
    }

    /// <summary>
    /// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    /// </summary>
    public TeacherEditorViewModel(ITeacherService teacherService, Teacher? teacher = null)
        : base(hostScreen: null!)  // –î–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ hostScreen –Ω–µ –Ω—É–∂–µ–Ω
    {
        _teacherService = teacherService ?? throw new ArgumentNullException(nameof(teacherService));
        _navigationService = null!; // –î–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞
        _dialogService = null!; // –î–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ DialogService –º–æ–∂–µ—Ç –Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è

        InitializeCommands();
        InitializePredefinedValues();

        if (teacher != null)
        {
            CurrentTeacher = teacher;
            IsEditMode = true;
            PopulateForm(teacher);
            FormTitle = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è";
        }
        else
        {
            SetupForCreation();
            FormTitle = "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è";
        }
    }

    #region Lifecycle Methods

    /// <summary>
    /// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ ViewModel
    /// </summary>
    protected override async Task OnFirstTimeLoadedAsync()
    {
        await base.OnFirstTimeLoadedAsync();
        
        if (CurrentTeacher != null)
        {
            await LoadTeacherDataAsync(CurrentTeacher.Uid);
        }
        else
        {
            SetupForCreation();
        }
    }

    #endregion

    #region Private Methods

    private void InitializeCommands()
    {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—ã
        var canSave = this.WhenAnyValue(
            x => x.FirstName,
            x => x.LastName,
            x => x.Email,
            x => x.SelectedDepartment,
            x => x.Position,
            x => x.IsSaving,
            (firstName, lastName, email, department, position, isSaving) =>
                !string.IsNullOrWhiteSpace(firstName) &&
                !string.IsNullOrWhiteSpace(lastName) &&
                !string.IsNullOrWhiteSpace(email) &&
                department != null &&
                !string.IsNullOrWhiteSpace(position) &&
                !isSaving);

        SaveCommand = CreateCommand(SaveAsync, canSave, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è");
        CancelCommand = CreateCommand(CancelAsync, null, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ");
        
        var canDelete = this.WhenAnyValue(x => x.IsEditMode, x => x.IsSaving, 
            (isEdit, isSaving) => isEdit && !isSaving);
        DeleteCommand = CreateCommand(DeleteAsync, canDelete, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è");
        
        CreateNewCommand = CreateCommand(CreateNewAsync, null, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è");
        
        // Additional commands for dialogs
        EditCommand = CreateCommand(EditAsync, null, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏");
        CloseCommand = CreateCommand(CloseAsync, null, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏");
        GenerateEmployeeCodeCommand = CreateCommand(GenerateEmployeeCodeAsync, null, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞");
        ManageCoursesCommand = CreateCommand(ManageCoursesAsync, null, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞–º–∏");
        ManageGroupsCommand = CreateCommand(ManageGroupsAsync, null, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø–∞–º–∏");
        ViewStatisticsCommand = CreateCommand(ViewStatisticsAsync, null, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
        SendMessageCommand = CreateCommand(SendMessageAsync, null, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è");
    }

    private void InitializePredefinedValues()
    {
        // –î–æ–ª–∂–Ω–æ—Å—Ç–∏
        var positions = new[]
        {
            "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç",
            "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", 
            "–°—Ç–∞—Ä—à–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å",
            "–î–æ—Ü–µ–Ω—Ç",
            "–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä",
            "–ó–∞–≤–µ–¥—É—é—â–∏–π –∫–∞—Ñ–µ–¥—Ä–æ–π"
        };
        AvailablePositions.Clear();
        foreach (var position in positions)
        {
            AvailablePositions.Add(position);
        }

        // –£—á–µ–Ω—ã–µ —Å—Ç–µ–ø–µ–Ω–∏
        var degrees = new[]
        {
            "",
            "–ö–∞–Ω–¥–∏–¥–∞—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫",
            "–ö–∞–Ω–¥–∏–¥–∞—Ç —Ñ–∏–∑–∏–∫–æ-–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫",
            "–ö–∞–Ω–¥–∏–¥–∞—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫",
            "–ö–∞–Ω–¥–∏–¥–∞—Ç –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫",
            "–î–æ–∫—Ç–æ—Ä —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫",
            "–î–æ–∫—Ç–æ—Ä —Ñ–∏–∑–∏–∫–æ-–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫",
            "–î–æ–∫—Ç–æ—Ä —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫",
            "–î–æ–∫—Ç–æ—Ä –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫"
        };
        AvailableDegrees.Clear();
        foreach (var degree in degrees)
        {
            AvailableDegrees.Add(degree);
        }

        // –£—á–µ–Ω—ã–µ –∑–≤–∞–Ω–∏—è
        var titles = new[]
        {
            "",
            "–î–æ—Ü–µ–Ω—Ç",
            "–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä"
        };
        AvailableTitles.Clear();
        foreach (var title in titles)
        {
            AvailableTitles.Add(title);
        }
    }

    private async Task LoadTeacherDataAsync(Guid teacherId)
    {
        try
        {
            ShowInfo("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è...");
            
            var teacher = await _teacherService.GetTeacherAsync(teacherId);
            if (teacher == null)
            {
                SetError("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
                await _navigationService.GoBackAsync();
                return;
            }

            CurrentTeacher = teacher;
            PopulateForm(teacher);
            
            ShowSuccess("–î–∞–Ω–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
            LogInfo("Loaded teacher: {TeacherName}", $"{teacher.LastName} {teacher.FirstName}");
        }
        catch (Exception ex)
        {
            SetError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", ex);
        }
    }

    public void PopulateForm(Teacher teacher)
    {
        FirstName = teacher.FirstName ?? string.Empty;
        LastName = teacher.LastName ?? string.Empty;
        MiddleName = teacher.MiddleName ?? string.Empty;
        EmployeeCode = teacher.EmployeeCode;
        Specialization = teacher.Specialization ?? string.Empty;
        AcademicDegree = teacher.AcademicDegree ?? string.Empty;
        AcademicTitle = teacher.AcademicTitle ?? string.Empty;
        HireDate = teacher.HireDate;
        HourlyRate = teacher.HourlyRate ?? 0;
        
        // –î–ª—è —Ä–∞–±–æ—Ç—ã –≤ –¥–∏–∞–ª–æ–≥–∞—Ö –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        // TODO: –≠—Ç–∏ –ø–æ–ª—è –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ –º–æ–¥–µ–ª—å Teacher –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        // Phone = teacher.PhoneNumber ?? string.Empty;
        // BirthDate = teacher.BirthDate;
        // OfficeNumber = teacher.OfficeNumber ?? string.Empty;
        // Address = teacher.Address ?? string.Empty;
        // TerminationDate = teacher.TerminationDate;
        // Biography = teacher.Biography ?? string.Empty;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –¥–µ—Ç–∞–ª–µ–π)
        // TODO: –ü–æ–ª—É—á–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
        CoursesCount = 5;
        GroupsCount = 2;
        StudentsCount = 45;
        AverageRating = 4.8;
        WorkExperience = $"{DateTime.Now.Year - teacher.HireDate.Year} –ª–µ—Ç";
        ActiveCoursesCount = 3;
        TotalStudentsCount = 45;
        AverageCourseRating = 4.7;
        CompletedCoursesCount = 12;
        PublicationsCount = 8;
        
        DepartmentName = "–ö–∞—Ñ–µ–¥—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"; // TODO: –ü–æ–ª—É—á–∞—Ç—å –∏–∑ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
    }

    private void SetupForCreation()
    {
        CurrentTeacher = null;
        ClearForm();
    }

    private void ClearForm()
    {
        FirstName = string.Empty;
        LastName = string.Empty;
        MiddleName = string.Empty;
        Email = string.Empty;
        PhoneNumber = string.Empty;
        SelectedDepartment = null;
        Position = string.Empty;
        AcademicDegree = string.Empty;
        AcademicTitle = string.Empty;
        Experience = 0;
        Specialization = string.Empty;
        Biography = string.Empty;
    }

    private async Task SaveAsync()
    {
        try
        {
            IsSaving = true;
            ClearError();

            if (IsEditMode && CurrentTeacher != null)
            {
                await UpdateTeacherAsync();
            }
            else
            {
                await CreateTeacherAsync();
            }

            ShowSuccess(IsEditMode ? "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω" : "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω");
            
            // –î–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            if (_navigationService != null)
            {
                await _navigationService.NavigateToAsync("teachers");
            }
        }
        catch (Exception ex)
        {
            SetError($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {ex.Message}", ex);
        }
        finally
        {
            IsSaving = false;
        }
    }

    private async Task UpdateTeacherAsync()
    {
        if (CurrentTeacher == null) return;

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ Person
        CurrentTeacher.Person.FirstName = FirstName.Trim();
        CurrentTeacher.Person.LastName = LastName.Trim();
        CurrentTeacher.Person.MiddleName = string.IsNullOrWhiteSpace(MiddleName) ? null : MiddleName.Trim();
        CurrentTeacher.Person.Email = Email.Trim();
        CurrentTeacher.Person.PhoneNumber = string.IsNullOrWhiteSpace(PhoneNumber) ? null : PhoneNumber.Trim();
        CurrentTeacher.Person.DateOfBirth = BirthDate ?? DateTime.MinValue;

        await _teacherService.UpdateTeacherAsync(CurrentTeacher);
        LogInfo("Updated teacher: {TeacherName}", $"{CurrentTeacher.Person.LastName} {CurrentTeacher.Person.FirstName}");
    }

    private async Task CreateTeacherAsync()
    {
        var newPerson = new Person
        {
            FirstName = FirstName.Trim(),
            LastName = LastName.Trim(),
            MiddleName = string.IsNullOrWhiteSpace(MiddleName) ? null : MiddleName.Trim(),
            Email = Email.Trim(),
            PhoneNumber = string.IsNullOrWhiteSpace(PhoneNumber) ? null : PhoneNumber.Trim(),
            DateOfBirth = BirthDate ?? DateTime.MinValue
        };

        var newTeacher = new Teacher
        {
            Uid = Guid.NewGuid(),
            PersonUid = newPerson.Uid,
            Person = newPerson,
            EmployeeCode = $"EMP{DateTime.Now.Year % 100:D2}{new Random().Next(1000, 9999)}",
            Specialization = string.IsNullOrWhiteSpace(Specialization) ? null : Specialization.Trim(),
            DepartmentUid = null, // SelectedDepartment —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ Department –ø–æ –∏–º–µ–Ω–∏
            HireDate = HireDate,
            HourlyRate = HourlyRate,
            IsActive = true,
            CreatedAt = DateTime.UtcNow,
            LastModifiedAt = DateTime.UtcNow
        };

        await _teacherService.CreateTeacherAsync(newTeacher);
        LogInfo("Created teacher: {TeacherName}", $"{newTeacher.Person.LastName} {newTeacher.Person.FirstName}");
    }

    private async Task DeleteAsync()
    {
        if (CurrentTeacher == null) return;

        try
        {
            IsSaving = true;
            
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            await _teacherService.DeleteTeacherAsync(CurrentTeacher.Uid);
            
            ShowSuccess("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω");
            LogInfo("Deleted teacher: {TeacherName}", $"{CurrentTeacher.Person.LastName} {CurrentTeacher.Person.FirstName}");
            
            await _navigationService.NavigateToAsync("teachers");
        }
        catch (Exception ex)
        {
            SetError($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {ex.Message}", ex);
        }
        finally
        {
            IsSaving = false;
        }
    }

    private async Task CancelAsync()
    {
        // –î–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        if (_navigationService != null)
        {
            await _navigationService.GoBackAsync();
        }
    }

    private async Task CreateNewAsync()
    {
        SetupForCreation();
        IsEditMode = false;
        FormTitle = "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è";
        ClearError();
    }

    private async Task EditAsync()
    {
        // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
        // –õ–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ code-behind –¥–∏–∞–ª–æ–≥–∞
        await Task.CompletedTask;
    }

    private async Task CloseAsync()
    {
        // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞ –¥–µ—Ç–∞–ª–µ–π
        // –õ–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ code-behind –¥–∏–∞–ª–æ–≥–∞
        await Task.CompletedTask;
    }

    private async Task GenerateEmployeeCodeAsync()
    {
        try
        {
            EmployeeCode = $"EMP{DateTime.Now.Year % 100:D2}{new Random().Next(1000, 9999)}";
            ShowInfo("–ö–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω");
        }
        catch (Exception ex)
        {
            SetError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞", ex);
        }
    }

    private async Task ManageCoursesAsync()
    {
        if (CurrentTeacher == null)
        {
            ShowError("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω");
            return;
        }

        var allCourseInstances = new List<CourseInstance>(); // await _courseInstanceService.GetAllCourseInstancesAsync();
        await _dialogService.ShowTeacherCoursesManagementDialogAsync(CurrentTeacher, allCourseInstances);
    }

    private async Task ManageGroupsAsync()
    {
        if (CurrentTeacher == null) return;

        try
        {
            // TODO: –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã
            var allGroups = new List<Group>(); // await _groupService.GetAllGroupsAsync();
            await _dialogService.ShowTeacherGroupsManagementDialogAsync(CurrentTeacher, allGroups);
        }
        catch (Exception ex)
        {
            SetError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø–∞–º–∏", ex);
        }
    }

    private async Task ViewStatisticsAsync()
    {
        if (CurrentTeacher == null) return;

        try
        {
            // TODO: –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
            var statistics = new
            {
                CoursesCount = CoursesCount,
                GroupsCount = GroupsCount,
                StudentsCount = StudentsCount,
                AverageRating = AverageRating,
                WorkExperience = WorkExperience
            };

            await _dialogService.ShowTeacherStatisticsDialogAsync(FullName, statistics);
        }
        catch (Exception ex)
        {
            SetError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", ex);
        }
    }

    private async Task SendMessageAsync()
    {
        if (CurrentTeacher == null) return;

        try
        {
            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é
            ShowInfo($"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é {FullName}");
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            SetError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è", ex);
        }
    }

    #endregion
} 