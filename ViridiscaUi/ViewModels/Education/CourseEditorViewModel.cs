using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reactive;
using System.Reactive.Linq;
using System.Threading.Tasks;
using DynamicData;
using ReactiveUI;
using ReactiveUI.Fody.Helpers;
using ViridiscaUi.Domain.Models.Education;
using ViridiscaUi.Domain.Models.Education.Enums;
using ViridiscaUi.Infrastructure.Navigation;
using ViridiscaUi.Services.Interfaces;
using ViridiscaUi.ViewModels;
using ViridiscaUi.ViewModels.Bases.Navigations;

namespace ViridiscaUi.ViewModels.Education
{
    /// <summary>
    /// ViewModel –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤
    /// </summary>
    [Route("course-editor", DisplayName = "–†–µ–¥–∞–∫—Ç–æ—Ä –∫—É—Ä—Å–æ–≤", IconKey = "üìö", Order = 302, RequiredRoles = new[] { "Admin", "Teacher" })]
    public class CourseEditorViewModel : RoutableViewModelBase
    {
        private readonly ICourseInstanceService _courseInstanceService;
        private readonly ITeacherService _teacherService;
        private readonly IUnifiedNavigationService _navigationService;
        private readonly SourceCache<Teacher, Guid> _teachersSource = new(t => t.Uid);
        private ReadOnlyObservableCollection<Teacher> _teachers;

        public ReadOnlyObservableCollection<Teacher> Teachers => _teachers;

        /// <summary>
        /// –§–ª–∞–≥ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (true) –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è (false)
        /// </summary>
        [Reactive] public bool IsEditMode { get; set; }

        /// <summary>
        /// –¢–µ–∫—É—â–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π –∫—É—Ä—Å
        /// </summary>
        [Reactive] public CourseInstance? CurrentCourseInstance { get; set; }

        /// <summary>
        /// –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫—É—Ä—Å–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        /// </summary>
        [Reactive] public Guid? CourseInstanceId { get; set; }

        // –ü–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        [Reactive] public string Name { get; set; } = string.Empty;
        [Reactive] public string Code { get; set; } = string.Empty;
        [Reactive] public string Description { get; set; } = string.Empty;
        [Reactive] public string? Category { get; set; } = string.Empty;
        [Reactive] public Teacher? SelectedTeacher { get; set; }
        [Reactive] public DateTime StartDate { get; set; } = DateTime.Now;
        [Reactive] public DateTime EndDate { get; set; } = DateTime.Now.AddMonths(4);
        [Reactive] public int Credits { get; set; } = 3;
        [Reactive] public CourseStatus SelectedStatus { get; set; } = CourseStatus.Draft;
        [Reactive] public string Prerequisites { get; set; } = string.Empty;
        [Reactive] public string LearningOutcomes { get; set; } = string.Empty;
        [Reactive] public int MaxEnrollments { get; set; } = 30;

        /// <summary>
        /// –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
        /// </summary>
        [Reactive] public ObservableCollection<Teacher> AvailableTeachers { get; set; } = new();

        /// <summary>
        /// –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∫—É—Ä—Å–∞
        /// </summary>
        [Reactive] public ObservableCollection<CourseStatus> AvailableStatuses { get; set; } = new();

        /// <summary>
        /// –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫—É—Ä—Å–æ–≤
        /// </summary>
        [Reactive] public ObservableCollection<string> AvailableCategories { get; set; } = new();

        /// <summary>
        /// –§–ª–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        /// </summary>
        [Reactive] public bool IsSaving { get; set; }

        /// <summary>
        /// –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º—ã
        /// </summary>
        [Reactive] public string FormTitle { get; set; } = "–°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–∞";

        [ObservableAsProperty] public bool IsLoading { get; }
        [ObservableAsProperty] public bool IsValid { get; }
        [ObservableAsProperty] public bool CanSave { get; }

        // Commands
        public ReactiveCommand<Unit, Unit> SaveCommand { get; set; } = null!;
        public ReactiveCommand<Unit, Unit> CancelCommand { get; set; } = null!;
        public ReactiveCommand<Unit, Unit> DeleteCommand { get; set; } = null!;
        public ReactiveCommand<Unit, Unit> CreateNewCommand { get; set; } = null!;
        public ReactiveCommand<Unit, Unit> GenerateCodeCommand { get; set; } = null!;
        public ReactiveCommand<Unit, Unit> EditCommand { get; set; } = null!;
        public ReactiveCommand<Unit, Unit> CloseCommand { get; set; } = null!;

        public string Title => CurrentCourseInstance == null ? "–î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å" : "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å";

        public CourseEditorViewModel(
            ICourseInstanceService courseInstanceService,
            ITeacherService teacherService,
            IUnifiedNavigationService navigationService,
            IScreen hostScreen) : base(hostScreen)
        {
            _courseInstanceService = courseInstanceService ?? throw new ArgumentNullException(nameof(courseInstanceService));
            _teacherService = teacherService ?? throw new ArgumentNullException(nameof(teacherService));
            _navigationService = navigationService ?? throw new ArgumentNullException(nameof(navigationService));

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
            _teachersSource.Connect()
                .ObserveOn(RxApp.MainThreadScheduler)
                .Bind(out _teachers)
                .Subscribe();

            InitializeCommands();
            InitializePredefinedValues();
        }

        private void InitializeCommands()
        {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—ã
            var canSave = this.WhenAnyValue(
                x => x.Name,
                x => x.Code,
                x => x.Description,
                x => x.SelectedTeacher,
                x => x.StartDate,
                x => x.EndDate,
                x => x.IsSaving,
                (name, code, description, teacher, startDate, endDate, isSaving) =>
                    !string.IsNullOrWhiteSpace(name) &&
                    !string.IsNullOrWhiteSpace(code) &&
                    !string.IsNullOrWhiteSpace(description) &&
                    teacher != null &&
                    startDate < endDate &&
                    !isSaving);

            SaveCommand = CreateCommand(SaveAsync, canSave, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞");
            CancelCommand = CreateCommand(CancelAsync, null, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ");
            
            var canDelete = this.WhenAnyValue(x => x.IsEditMode, x => x.IsSaving, 
                (isEdit, isSaving) => isEdit && !isSaving);
            DeleteCommand = CreateCommand(DeleteAsync, canDelete, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞");
            
            CreateNewCommand = CreateCommand(CreateNewAsync, null, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞");
            GenerateCodeCommand = CreateCommand(GenerateCodeAsync, null, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞");
            
            EditCommand = CreateCommand(EditAsync, null, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫—É—Ä—Å–∞");
            CloseCommand = CreateCommand(CloseAsync, null, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∫—É—Ä—Å–∞");
        }

        private void InitializePredefinedValues()
        {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –∫—É—Ä—Å–∞
            AvailableStatuses.Clear();
            foreach (var status in Enum.GetValues<CourseStatus>())
            {
                AvailableStatuses.Add(status);
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫—É—Ä—Å–æ–≤
            AvailableCategories.Clear();
            var categories = new[]
            {
                "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
                "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                "–°–∏—Å—Ç–µ–º–Ω–æ–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "–î–∏–∑–∞–π–Ω",
                "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
                "–§–∏–∑–∏–∫–∞",
                "–û–±—â–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã"
            };

            foreach (var category in categories)
            {
                AvailableCategories.Add(category);
            }
        }

        /// <summary>
        /// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ ViewModel
        /// </summary>
        protected override async Task OnFirstTimeLoadedAsync()
        {
            await base.OnFirstTimeLoadedAsync();
            
            await LoadTeachersAsync();
            
            if (CurrentCourseInstance != null)
            {
                await LoadCourseInstanceAsync(CurrentCourseInstance.Uid);
            }
            else
            {
                SetupForCreation();
            }
        }

        private async Task LoadTeachersAsync()
        {
            try
            {
                ShowInfo("–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π...");
                var activeTeachers = await _teacherService.GetAllTeachersAsync();
                
                AvailableTeachers.Clear();
                foreach (var teacher in activeTeachers.Where(t => t.IsActive))
                {
                    AvailableTeachers.Add(teacher);
                }
                
                LogInfo("Loaded {TeacherCount} teachers", activeTeachers.Count());
            }
            catch (Exception ex)
            {
                SetError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π", ex);
            }
        }

        private async Task LoadCourseInstanceAsync(Guid courseInstanceId)
        {
            try
            {
                ShowInfo("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞...");
                
                var courseInstance = await _courseInstanceService.GetCourseInstanceAsync(courseInstanceId);
                if (courseInstance == null)
                {
                    SetError("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω");
                    await _navigationService.GoBackAsync();
                    return;
                }

                CurrentCourseInstance = courseInstance;
                PopulateForm(courseInstance);
                
                ShowSuccess("–î–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
                LogInfo("Loaded course: {CourseName}", courseInstance.Name);
            }
            catch (Exception ex)
            {
                SetError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–∞", ex);
            }
        }

        private void PopulateForm(CourseInstance courseInstance)
        {
            // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
            Name = courseInstance.Name;
            Code = courseInstance.Code;
            Description = courseInstance.Description;
            StartDate = courseInstance.StartDate;
            EndDate = courseInstance.EndDate ?? DateTime.Now.AddMonths(4);
            MaxEnrollments = courseInstance.MaxEnrollments;
            SelectedStatus = courseInstance.Status;

            // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            SelectedTeacher = AvailableTeachers.FirstOrDefault(t => t.Uid == courseInstance.TeacherUid);

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –¥–µ—Ç–∞–ª–µ–π
            CurrentCourseInstance = courseInstance;
        }

        private void SetupForCreation()
        {
            CurrentCourseInstance = null;
            ClearForm();
            GenerateCode();
        }

        private void ClearForm()
        {
            Name = string.Empty;
            Code = string.Empty;
            Description = string.Empty;
            Category = string.Empty;
            SelectedTeacher = null;
            StartDate = DateTime.Now;
            EndDate = DateTime.Now.AddMonths(4);
            Credits = 3;
            SelectedStatus = CourseStatus.Draft;
            Prerequisites = string.Empty;
            LearningOutcomes = string.Empty;
            MaxEnrollments = 30;
        }

        private void GenerateCode()
        {
            var year = DateTime.Now.Year;
            var random = new Random();
            Code = $"COURSE{year % 100:D2}{random.Next(100, 999)}";
        }

        private async Task SaveAsync()
        {
            try
            {
                IsSaving = true;
                ClearError();

                if (CurrentCourseInstance != null)
                {
                    await UpdateCourseInstanceAsync();
                }
                else
                {
                    await CreateCourseInstanceAsync();
                }

                ShowSuccess(CurrentCourseInstance != null ? "–ö—É—Ä—Å –æ–±–Ω–æ–≤–ª–µ–Ω" : "–ö—É—Ä—Å —Å–æ–∑–¥–∞–Ω");
                
                // –î–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
                if (_navigationService != null)
                {
                    await _navigationService.NavigateToAsync("courses");
                }
            }
            catch (Exception ex)
            {
                SetError($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {ex.Message}", ex);
            }
            finally
            {
                IsSaving = false;
            }
        }

        private async Task UpdateCourseInstanceAsync()
        {
            if (CurrentCourseInstance == null || SelectedTeacher == null) return;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—É—Ä—Å–∞
            CurrentCourseInstance.Name = Name;
            CurrentCourseInstance.Code = Code;
            CurrentCourseInstance.Description = Description;
            CurrentCourseInstance.StartDate = StartDate;
            CurrentCourseInstance.EndDate = EndDate;
            CurrentCourseInstance.MaxEnrollments = MaxEnrollments;
            CurrentCourseInstance.Status = SelectedStatus;
            CurrentCourseInstance.TeacherUid = SelectedTeacher.Uid;

            var success = await _courseInstanceService.UpdateAsync(CurrentCourseInstance);
            if (success)
            {
                ShowSuccess($"–ö—É—Ä—Å '{CurrentCourseInstance.Name}' –æ–±–Ω–æ–≤–ª–µ–Ω");
                // –î–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            }
            else
            {
                SetError("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫—É—Ä—Å–∞");
            }
        }

        private async Task CreateCourseInstanceAsync()
        {
            if (SelectedTeacher == null) return;

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—É—Ä—Å–∞
            var newCourseInstance = new CourseInstance
            {
                Name = Name,
                Code = Code,
                Description = Description,
                StartDate = StartDate,
                EndDate = EndDate,
                MaxEnrollments = MaxEnrollments,
                Status = SelectedStatus,
                TeacherUid = SelectedTeacher.Uid
            };

            var createdCourseInstance = await _courseInstanceService.CreateAsync(newCourseInstance);
            if (createdCourseInstance != null)
            {
                ShowSuccess($"–ö—É—Ä—Å '{createdCourseInstance.Name}' —Å–æ–∑–¥–∞–Ω");
                // –î–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            }
        }

        private async Task DeleteAsync()
        {
            if (CurrentCourseInstance == null) return;

            try
            {
                IsSaving = true;
                
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                await _courseInstanceService.DeleteCourseInstanceAsync(CurrentCourseInstance.Uid);
                
                ShowSuccess("–ö—É—Ä—Å —É–¥–∞–ª–µ–Ω");
                LogInfo("Deleted course: {CourseName}", CurrentCourseInstance.Name);
                
                await _navigationService.NavigateToAsync("courses");
            }
            catch (Exception ex)
            {
                SetError($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {ex.Message}", ex);
            }
            finally
            {
                IsSaving = false;
            }
        }

        private async Task CancelAsync()
        {
            // –î–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            if (_navigationService != null)
            {
                await _navigationService.GoBackAsync();
            }
        }

        private async Task CreateNewAsync()
        {
            SetupForCreation();
            IsEditMode = false;
            FormTitle = "–°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–∞";
            ClearError();
        }

        private async Task GenerateCodeAsync()
        {
            GenerateCode();
            ShowInfo("–ö–æ–¥ –∫—É—Ä—Å–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω");
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫—É—Ä—Å–∞
        /// </summary>
        public string GetStatusText(CourseStatus status)
        {
            return status switch
            {
                CourseStatus.Draft => "–ß–µ—Ä–Ω–æ–≤–∏–∫",
                CourseStatus.Published => "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω",
                CourseStatus.Active => "–ê–∫—Ç–∏–≤–µ–Ω",
                CourseStatus.Completed => "–ó–∞–≤–µ—Ä—à–µ–Ω",
                CourseStatus.Archived => "–í –∞—Ä—Ö–∏–≤–µ",
                _ => "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            };
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫—É—Ä—Å–∞
        /// </summary>
        public bool CanChangeStatus(CourseStatus newStatus)
        {
            return SelectedStatus switch
            {
                CourseStatus.Draft => newStatus == CourseStatus.Published,
                CourseStatus.Published => newStatus == CourseStatus.Active || newStatus == CourseStatus.Draft,
                CourseStatus.Active => newStatus == CourseStatus.Completed || newStatus == CourseStatus.Archived,
                CourseStatus.Completed => newStatus == CourseStatus.Archived,
                CourseStatus.Archived => false,
                _ => false
            };
        }

        private async Task EditAsync()
        {
            // –ö–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
            // –õ–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ –¥–∏–∞–ª–æ–≥–µ
            await Task.CompletedTask;
        }

        private async Task CloseAsync()
        {
            // –ö–æ–º–∞–Ω–¥–∞ –∑–∞–∫—Ä—ã—Ç–∏—è - –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥
            // –õ–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ –¥–∏–∞–ª–æ–≥–µ
            await Task.CompletedTask;
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –¥–µ—Ç–∞–ª–µ–π
        [Reactive] public ObservableCollection<Lesson> Lessons { get; set; } = new();
        [Reactive] public ObservableCollection<Enrollment> Enrollments { get; set; } = new();
        [Reactive] public string CourseDuration { get; set; } = string.Empty;
        [Reactive] public bool HasErrors { get; set; }

        /// <summary>
        /// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        /// </summary>
        public CourseEditorViewModel(ICourseInstanceService courseInstanceService, CourseInstance? courseInstance = null)
            : base(hostScreen: null!)  // –î–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ hostScreen –Ω–µ –Ω—É–∂–µ–Ω
        {
            _courseInstanceService = courseInstanceService ?? throw new ArgumentNullException(nameof(courseInstanceService));
            _teacherService = null!; // –î–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ teacherService –Ω–µ –Ω—É–∂–µ–Ω
            _navigationService = null!; // –î–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
            _teachersSource.Connect()
                .ObserveOn(RxApp.MainThreadScheduler)
                .Bind(out _teachers)
                .Subscribe();

            InitializeCommands();
            InitializePredefinedValues();

            if (courseInstance != null)
            {
                CurrentCourseInstance = courseInstance;
                IsEditMode = true;
                FormTitle = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞";
                PopulateForm(courseInstance);
                LoadModulesAndEnrollments(courseInstance);
            }
            else
            {
                SetupForCreation();
            }
        }

        private void LoadModulesAndEnrollments(CourseInstance courseInstance)
        {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω—è—Ç–∏—è –∏ –∑–∞–ø–∏—Å–∏ –∫—É—Ä—Å–∞
            Lessons.Clear();
            if (courseInstance.Lessons != null)
            {
                foreach (var lesson in courseInstance.Lessons.OrderBy(l => l.OrderIndex))
                {
                    Lessons.Add(lesson);
                }
            }

            Enrollments.Clear();
            if (courseInstance.Enrollments != null)
            {
                foreach (var enrollment in courseInstance.Enrollments.OrderBy(e => e.EnrollmentDate))
                {
                    Enrollments.Add(enrollment);
                }
            }

            // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞
            if (courseInstance.EndDate != null)
            {
                var duration = courseInstance.EndDate.Value - courseInstance.StartDate;
                CourseDuration = $"{duration.Days} –¥–Ω–µ–π ({Math.Round(duration.TotalDays / 7, 1)} –Ω–µ–¥–µ–ª—å)";
            }
            else
            {
                CourseDuration = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞";
            }
        }

        [Reactive] public CourseInstance? SelectedCourseInstance { get; set; }

        private async Task<CourseInstance> CreateCourseInstanceFromInputAsync()
        {
            return new CourseInstance
            {
                Uid = SelectedCourseInstance?.Uid ?? Guid.NewGuid(),
                // Map other properties as needed
                CreatedAt = DateTime.UtcNow,
                LastModifiedAt = DateTime.UtcNow
            };
        }

        private async Task<bool> ValidateCourseInstanceAsync(CourseInstance courseInstance)
        {
            // TODO: Implement validation logic
            await Task.Delay(1);
            return true;
        }

        private CourseStatus ParseCourseStatus(string status)
        {
            if (string.IsNullOrWhiteSpace(status))
                return CourseStatus.Draft;

            // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
            if (Enum.TryParse<CourseStatus>(status, true, out var parsedStatus))
            {
                return parsedStatus;
            }

            // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ —Ä—É—Å—Å–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è–º
            return status.ToLowerInvariant() switch
            {
                "—á–µ—Ä–Ω–æ–≤–∏–∫" => CourseStatus.Draft,
                "–∞–∫—Ç–∏–≤–µ–Ω" or "–∞–∫—Ç–∏–≤–Ω—ã–π" => CourseStatus.Active,
                "–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω" or "–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π" => CourseStatus.Published,
                "–∑–∞–≤–µ—Ä—à–µ–Ω" or "–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π" => CourseStatus.Completed,
                "–∞—Ä—Ö–∏–≤" or "–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π" => CourseStatus.Archived,
                "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" or "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π" => CourseStatus.Suspended,
                "–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω" or "–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π" => CourseStatus.Draft,
                "–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω" or "–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π" => CourseStatus.Suspended,
                _ => CourseStatus.Draft // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            };
        }
    }
} 
