// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ViridiscaUi.Infrastructure;

#nullable disable

namespace ViridiscaUi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Auth.Account", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("FailedLoginAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("failed_login_attempts");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_email_confirmed");

                    b.Property<bool>("IsLocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_locked");

                    b.Property<DateTime?>("LastFailedLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_failed_login_at");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("LockedUntil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("locked_until");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<Guid>("PersonUid")
                        .HasColumnType("uuid")
                        .HasColumnName("person_uid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("Uid")
                        .HasName("pk_accounts");

                    b.HasIndex("PersonUid")
                        .IsUnique()
                        .HasDatabaseName("ix_accounts_person_uid");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("ix_accounts_username");

                    b.ToTable("accounts", (string)null);

                    b.HasData(
                        new
                        {
                            Uid = new Guid("77777777-7777-7777-7777-777777777777"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            FailedLoginAttempts = 0,
                            IsActive = true,
                            IsEmailConfirmed = true,
                            IsLocked = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PasswordHash = "$2a$11$GjZru83/8zIBf7TRU5keb.J1s/puDucqcVdPVqvXG02gMcw3F.qZm",
                            PersonUid = new Guid("44444444-4444-4444-4444-444444444444"),
                            Username = "admin"
                        },
                        new
                        {
                            Uid = new Guid("88888888-8888-8888-8888-888888888888"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            FailedLoginAttempts = 0,
                            IsActive = true,
                            IsEmailConfirmed = true,
                            IsLocked = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PasswordHash = "$2a$11$ybAXNdR88fN3iscBh5CZDeO1YKI4JrHeLANB49AYIY/atCD9XWvWm",
                            PersonUid = new Guid("55555555-5555-5555-5555-555555555555"),
                            Username = "teacher"
                        },
                        new
                        {
                            Uid = new Guid("99999999-9999-9999-9999-999999999999"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            FailedLoginAttempts = 0,
                            IsActive = true,
                            IsEmailConfirmed = true,
                            IsLocked = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PasswordHash = "$2a$11$goaePviZrvAmpoMYoiodQuuXeQu/50rgF6omjV3xqee8lA9AihvRK",
                            PersonUid = new Guid("66666666-6666-6666-6666-666666666666"),
                            Username = "student"
                        });
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Auth.Permission", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Uid")
                        .HasName("pk_permissions");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_permissions_name");

                    b.ToTable("permissions", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Auth.Person", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("middle_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("profile_image_url");

                    b.HasKey("Uid")
                        .HasName("pk_persons");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_persons_email");

                    b.HasIndex("PhoneNumber")
                        .HasDatabaseName("ix_persons_phone_number");

                    b.ToTable("persons", (string)null);

                    b.HasData(
                        new
                        {
                            Uid = new Guid("44444444-4444-4444-4444-444444444444"),
                            Address = "",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1989, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@viridisca.local",
                            FirstName = "Админ",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastName = "Системы",
                            MiddleName = "Владимирович",
                            PhoneNumber = "",
                            ProfileImageUrl = ""
                        },
                        new
                        {
                            Uid = new Guid("55555555-5555-5555-5555-555555555555"),
                            Address = "",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1984, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "teacher@viridisca.local",
                            FirstName = "Преподаватель",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastName = "Тестовый",
                            MiddleName = "Иванович",
                            PhoneNumber = "+7 (900) 123-45-67",
                            ProfileImageUrl = ""
                        },
                        new
                        {
                            Uid = new Guid("66666666-6666-6666-6666-666666666666"),
                            Address = "",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(2004, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "student@viridisca.local",
                            FirstName = "Студент",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastName = "Тестовый",
                            MiddleName = "Петрович",
                            PhoneNumber = "+7 (900) 987-65-43",
                            ProfileImageUrl = ""
                        });
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Auth.PersonRole", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime>("AssignedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("AssignedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("assigned_by");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("context");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("PersonUid")
                        .HasColumnType("uuid")
                        .HasColumnName("person_uid");

                    b.Property<Guid>("RoleUid")
                        .HasColumnType("uuid")
                        .HasColumnName("role_uid");

                    b.HasKey("Uid")
                        .HasName("pk_person_roles");

                    b.HasIndex("RoleUid")
                        .HasDatabaseName("ix_person_roles_role_uid");

                    b.HasIndex("PersonUid", "RoleUid", "Context")
                        .HasDatabaseName("ix_person_roles_person_uid_role_uid_context");

                    b.ToTable("person_roles", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Auth.Role", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("RoleType")
                        .HasColumnType("integer")
                        .HasColumnName("role_type");

                    b.HasKey("Uid")
                        .HasName("pk_roles");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_roles_name");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Uid = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Системный администратор",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "SystemAdmin",
                            RoleType = 0
                        },
                        new
                        {
                            Uid = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Преподаватель",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Teacher",
                            RoleType = 0
                        },
                        new
                        {
                            Uid = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Студент",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Student",
                            RoleType = 0
                        });
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Auth.RolePermission", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_at");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("PermissionUid")
                        .HasColumnType("uuid")
                        .HasColumnName("permission_uid");

                    b.Property<Guid?>("PermissionUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("permission_uid1");

                    b.Property<Guid>("RoleUid")
                        .HasColumnType("uuid")
                        .HasColumnName("role_uid");

                    b.Property<Guid?>("RoleUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("role_uid1");

                    b.HasKey("Uid")
                        .HasName("pk_role_permissions");

                    b.HasIndex("PermissionUid")
                        .HasDatabaseName("ix_role_permissions_permission_uid");

                    b.HasIndex("PermissionUid1")
                        .HasDatabaseName("ix_role_permissions_permission_uid1");

                    b.HasIndex("RoleUid1")
                        .HasDatabaseName("ix_role_permissions_role_uid1");

                    b.HasIndex("RoleUid", "PermissionUid")
                        .IsUnique()
                        .HasDatabaseName("ix_role_permissions_role_uid_permission_uid");

                    b.ToTable("role_permissions", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.AcademicPeriod", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<int>("AcademicYear")
                        .HasColumnType("integer")
                        .HasColumnName("academic_year");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_current");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Uid")
                        .HasName("pk_academic_periods");

                    b.HasIndex("AcademicYear", "Type")
                        .HasDatabaseName("ix_academic_periods_academic_year_type");

                    b.ToTable("academic_periods", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Assignment", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<Guid>("CourseInstanceUid")
                        .HasColumnType("uuid")
                        .HasColumnName("course_instance_uid");

                    b.Property<Guid?>("CourseInstanceUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("course_instance_uid1");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer")
                        .HasColumnName("difficulty");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_date");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("instructions");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<Guid?>("LessonUid")
                        .HasColumnType("uuid")
                        .HasColumnName("lesson_uid");

                    b.Property<double>("MaxGrade")
                        .HasColumnType("double precision")
                        .HasColumnName("max_grade");

                    b.Property<double>("MaxScore")
                        .HasColumnType("double precision")
                        .HasColumnName("max_score");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Uid")
                        .HasName("pk_assignments");

                    b.HasIndex("CourseInstanceUid")
                        .HasDatabaseName("ix_assignments_course_instance_uid");

                    b.HasIndex("CourseInstanceUid1")
                        .HasDatabaseName("ix_assignments_course_instance_uid1");

                    b.HasIndex("LessonUid")
                        .HasDatabaseName("ix_assignments_lesson_uid");

                    b.ToTable("assignments", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.CourseInstance", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<Guid>("AcademicPeriodUid")
                        .HasColumnType("uuid")
                        .HasColumnName("academic_period_uid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Credits")
                        .HasColumnType("integer")
                        .HasColumnName("credits");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<Guid>("GroupUid")
                        .HasColumnType("uuid")
                        .HasColumnName("group_uid");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("LearningOutcomes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("learning_outcomes");

                    b.Property<int>("MaxEnrollments")
                        .HasColumnType("integer")
                        .HasColumnName("max_enrollments");

                    b.Property<int>("MaxStudents")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(30)
                        .HasColumnName("max_students");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Prerequisites")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("prerequisites");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid>("SubjectUid")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_uid");

                    b.Property<Guid>("TeacherUid")
                        .HasColumnType("uuid")
                        .HasColumnName("teacher_uid");

                    b.Property<Guid?>("TeacherUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("teacher_uid1");

                    b.HasKey("Uid")
                        .HasName("pk_course_instances");

                    b.HasIndex("AcademicPeriodUid")
                        .HasDatabaseName("ix_course_instances_academic_period_uid");

                    b.HasIndex("GroupUid")
                        .HasDatabaseName("ix_course_instances_group_uid");

                    b.HasIndex("TeacherUid")
                        .HasDatabaseName("ix_course_instances_teacher_uid");

                    b.HasIndex("TeacherUid1")
                        .HasDatabaseName("ix_course_instances_teacher_uid1");

                    b.HasIndex("SubjectUid", "GroupUid", "AcademicPeriodUid")
                        .HasDatabaseName("ix_course_instances_subject_uid_group_uid_academic_period_uid");

                    b.ToTable("course_instances", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Curriculum", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<int>("DurationInSemesters")
                        .HasColumnType("integer")
                        .HasColumnName("duration_in_semesters");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<int>("TotalCredits")
                        .HasColumnType("integer")
                        .HasColumnName("total_credits");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_from");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_to");

                    b.HasKey("Uid")
                        .HasName("pk_curricula");

                    b.ToTable("curricula", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.CurriculumSubject", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Credits")
                        .HasColumnType("integer")
                        .HasColumnName("credits");

                    b.Property<Guid>("CurriculumUid")
                        .HasColumnType("uuid")
                        .HasColumnName("curriculum_uid");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_required");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Semester")
                        .HasColumnType("integer")
                        .HasColumnName("semester");

                    b.Property<Guid>("SubjectUid")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_uid");

                    b.HasKey("Uid")
                        .HasName("pk_curriculum_subjects");

                    b.HasIndex("SubjectUid")
                        .HasDatabaseName("ix_curriculum_subjects_subject_uid");

                    b.HasIndex("CurriculumUid", "SubjectUid")
                        .IsUnique()
                        .HasDatabaseName("ix_curriculum_subjects_curriculum_uid_subject_uid");

                    b.ToTable("curriculum_subjects", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Enrollment", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completion_date");

                    b.Property<Guid>("CourseInstanceUid")
                        .HasColumnType("uuid")
                        .HasColumnName("course_instance_uid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("EnrolledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enrolled_at");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enrollment_date");

                    b.Property<decimal?>("FinalGrade")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("final_grade");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("StudentUid")
                        .HasColumnType("uuid")
                        .HasColumnName("student_uid");

                    b.HasKey("Uid")
                        .HasName("pk_enrollments");

                    b.HasIndex("CourseInstanceUid")
                        .HasDatabaseName("ix_enrollments_course_instance_uid");

                    b.HasIndex("StudentUid", "CourseInstanceUid")
                        .IsUnique()
                        .HasDatabaseName("ix_enrollments_student_uid_course_instance_uid");

                    b.ToTable("enrollments", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Exam", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<Guid?>("AcademicPeriodUid")
                        .HasColumnType("uuid")
                        .HasColumnName("academic_period_uid");

                    b.Property<Guid>("CourseInstanceUid")
                        .HasColumnType("uuid")
                        .HasColumnName("course_instance_uid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("exam_date");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("instructions");

                    b.Property<bool>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_published");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("location");

                    b.Property<decimal>("MaxScore")
                        .HasPrecision(6, 2)
                        .HasColumnType("numeric(6,2)")
                        .HasColumnName("max_score");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Uid")
                        .HasName("pk_exams");

                    b.HasIndex("AcademicPeriodUid")
                        .HasDatabaseName("ix_exams_academic_period_uid");

                    b.HasIndex("CourseInstanceUid")
                        .HasDatabaseName("ix_exams_course_instance_uid");

                    b.HasIndex("ExamDate")
                        .HasDatabaseName("ix_exams_exam_date");

                    b.HasIndex("IsPublished")
                        .HasDatabaseName("ix_exams_is_published");

                    b.ToTable("exams", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.ExamResult", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("ExamUid")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_uid");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("feedback");

                    b.Property<DateTime?>("GradedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("graded_at");

                    b.Property<bool>("IsAbsent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_absent");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<decimal>("Score")
                        .HasPrecision(6, 2)
                        .HasColumnType("numeric(6,2)")
                        .HasColumnName("score");

                    b.Property<Guid>("StudentUid")
                        .HasColumnType("uuid")
                        .HasColumnName("student_uid");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submitted_at");

                    b.HasKey("Uid")
                        .HasName("pk_exam_results");

                    b.HasIndex("StudentUid")
                        .HasDatabaseName("ix_exam_results_student_uid");

                    b.HasIndex("ExamUid", "StudentUid")
                        .IsUnique()
                        .HasDatabaseName("ix_exam_results_exam_uid_student_uid");

                    b.ToTable("exam_results", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Grade", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<Guid?>("AssignmentUid")
                        .HasColumnType("uuid")
                        .HasColumnName("assignment_uid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTime>("GradedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("graded_at");

                    b.Property<Guid?>("GradedByUid")
                        .HasColumnType("uuid")
                        .HasColumnName("graded_by_uid");

                    b.Property<bool>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_published");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("issued_at");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("LessonUid")
                        .HasColumnType("uuid")
                        .HasColumnName("lesson_uid");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_at");

                    b.Property<Guid>("StudentUid")
                        .HasColumnType("uuid")
                        .HasColumnName("student_uid");

                    b.Property<Guid?>("StudentUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("student_uid1");

                    b.Property<Guid>("SubjectUid")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_uid");

                    b.Property<Guid>("TeacherUid")
                        .HasColumnType("uuid")
                        .HasColumnName("teacher_uid");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<decimal>("Value")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("value");

                    b.HasKey("Uid")
                        .HasName("pk_grades");

                    b.HasIndex("AssignmentUid")
                        .HasDatabaseName("ix_grades_assignment_uid");

                    b.HasIndex("GradedByUid")
                        .HasDatabaseName("ix_grades_graded_by_uid");

                    b.HasIndex("IsPublished")
                        .HasDatabaseName("ix_grades_is_published");

                    b.HasIndex("StudentUid")
                        .HasDatabaseName("ix_grades_student_uid");

                    b.HasIndex("StudentUid1")
                        .HasDatabaseName("ix_grades_student_uid1");

                    b.HasIndex("SubjectUid")
                        .HasDatabaseName("ix_grades_subject_uid");

                    b.HasIndex("TeacherUid")
                        .HasDatabaseName("ix_grades_teacher_uid");

                    b.ToTable("grades", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.GradeComment", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<Guid>("AuthorUid")
                        .HasColumnType("uuid")
                        .HasColumnName("author_uid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("GradeUid")
                        .HasColumnType("uuid")
                        .HasColumnName("grade_uid");

                    b.Property<Guid?>("GradeUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("grade_uid1");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Uid")
                        .HasName("pk_grade_comment");

                    b.HasIndex("AuthorUid")
                        .HasDatabaseName("ix_grade_comment_author_uid");

                    b.HasIndex("GradeUid")
                        .HasDatabaseName("ix_grade_comment_grade_uid");

                    b.HasIndex("GradeUid1")
                        .HasDatabaseName("ix_grade_comment_grade_uid1");

                    b.ToTable("grade_comment", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.GradeRevision", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("GradeUid")
                        .HasColumnType("uuid")
                        .HasColumnName("grade_uid");

                    b.Property<Guid?>("GradeUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("grade_uid1");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("NewDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("new_description");

                    b.Property<decimal>("NewValue")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("new_value");

                    b.Property<string>("PreviousDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("previous_description");

                    b.Property<decimal>("PreviousValue")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("previous_value");

                    b.Property<string>("RevisionReason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("revision_reason");

                    b.Property<Guid>("TeacherUid")
                        .HasColumnType("uuid")
                        .HasColumnName("teacher_uid");

                    b.HasKey("Uid")
                        .HasName("pk_grade_revision");

                    b.HasIndex("GradeUid")
                        .HasDatabaseName("ix_grade_revision_grade_uid");

                    b.HasIndex("GradeUid1")
                        .HasDatabaseName("ix_grade_revision_grade_uid1");

                    b.HasIndex("TeacherUid")
                        .HasDatabaseName("ix_grade_revision_teacher_uid");

                    b.ToTable("grade_revision", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Group", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("CuratorUid")
                        .HasColumnType("uuid")
                        .HasColumnName("curator_uid");

                    b.Property<Guid>("DepartmentUid")
                        .HasColumnType("uuid")
                        .HasColumnName("department_uid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<DateTime?>("LastActivityDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_activity_date");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("MaxStudents")
                        .HasColumnType("integer")
                        .HasColumnName("max_students");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Uid")
                        .HasName("pk_groups");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_groups_code");

                    b.HasIndex("CuratorUid")
                        .HasDatabaseName("ix_groups_curator_uid");

                    b.HasIndex("DepartmentUid")
                        .HasDatabaseName("ix_groups_department_uid");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_groups_status");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Lesson", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasColumnName("content");

                    b.Property<Guid>("CourseInstanceUid")
                        .HasColumnType("uuid")
                        .HasColumnName("course_instance_uid");

                    b.Property<Guid?>("CourseInstanceUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("course_instance_uid1");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<Guid?>("GroupUid")
                        .HasColumnType("uuid")
                        .HasColumnName("group_uid");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean")
                        .HasColumnName("is_published");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer")
                        .HasColumnName("order_index");

                    b.Property<Guid?>("SubjectUid")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_uid");

                    b.Property<Guid?>("TeacherUid")
                        .HasColumnType("uuid")
                        .HasColumnName("teacher_uid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("topic");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Uid")
                        .HasName("pk_lessons");

                    b.HasIndex("CourseInstanceUid")
                        .HasDatabaseName("ix_lessons_course_instance_uid");

                    b.HasIndex("CourseInstanceUid1")
                        .HasDatabaseName("ix_lessons_course_instance_uid1");

                    b.HasIndex("GroupUid")
                        .HasDatabaseName("ix_lessons_group_uid");

                    b.HasIndex("SubjectUid")
                        .HasDatabaseName("ix_lessons_subject_uid");

                    b.HasIndex("TeacherUid")
                        .HasDatabaseName("ix_lessons_teacher_uid");

                    b.ToTable("lessons", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.LessonProgress", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_completed");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<Guid>("LessonUid")
                        .HasColumnType("uuid")
                        .HasColumnName("lesson_uid");

                    b.Property<Guid>("StudentUid")
                        .HasColumnType("uuid")
                        .HasColumnName("student_uid");

                    b.Property<TimeSpan?>("TimeSpent")
                        .HasColumnType("interval")
                        .HasColumnName("time_spent");

                    b.HasKey("Uid")
                        .HasName("pk_lesson_progress");

                    b.HasIndex("LessonUid")
                        .HasDatabaseName("ix_lesson_progress_lesson_uid");

                    b.HasIndex("StudentUid", "LessonUid")
                        .IsUnique()
                        .HasDatabaseName("ix_lesson_progress_student_uid_lesson_uid");

                    b.ToTable("lesson_progress", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.LibraryLoan", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<Guid>("BorrowerUid")
                        .HasColumnType("uuid")
                        .HasColumnName("borrower_uid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_date");

                    b.Property<decimal>("FineAmount")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("fine_amount");

                    b.Property<bool>("IsReturned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_returned");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("LoanDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("loan_date");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<Guid>("ResourceUid")
                        .HasColumnType("uuid")
                        .HasColumnName("resource_uid");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("return_date");

                    b.HasKey("Uid")
                        .HasName("pk_library_loans");

                    b.HasIndex("BorrowerUid")
                        .HasDatabaseName("ix_library_loans_borrower_uid");

                    b.HasIndex("DueDate")
                        .HasDatabaseName("ix_library_loans_due_date");

                    b.HasIndex("IsReturned")
                        .HasDatabaseName("ix_library_loans_is_returned");

                    b.HasIndex("ResourceUid")
                        .HasDatabaseName("ix_library_loans_resource_uid");

                    b.ToTable("library_loans", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.LibraryResource", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("author");

                    b.Property<int>("AvailableCopies")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("available_copies");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("DigitalUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("digital_url");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("isbn");

                    b.Property<bool>("IsDigital")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_digital");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("location");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_date");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("publisher");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("tags");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("title");

                    b.Property<int>("TotalCopies")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("total_copies");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Uid")
                        .HasName("pk_library_resources");

                    b.HasIndex("ISBN")
                        .HasDatabaseName("ix_library_resources_isbn");

                    b.HasIndex("Title")
                        .HasDatabaseName("ix_library_resources_title");

                    b.HasIndex("Type")
                        .HasDatabaseName("ix_library_resources_type");

                    b.ToTable("library_resources", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.ScheduleSlot", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<string>("Classroom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("classroom");

                    b.Property<Guid>("CourseInstanceUid")
                        .HasColumnType("uuid")
                        .HasColumnName("course_instance_uid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer")
                        .HasColumnName("day_of_week");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval")
                        .HasColumnName("start_time");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_from");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_to");

                    b.HasKey("Uid")
                        .HasName("pk_schedule_slots");

                    b.HasIndex("CourseInstanceUid", "DayOfWeek", "StartTime")
                        .HasDatabaseName("ix_schedule_slots_course_instance_uid_day_of_week_start_time");

                    b.ToTable("schedule_slots", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Student", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("CurriculumUid")
                        .HasColumnType("uuid")
                        .HasColumnName("curriculum_uid");

                    b.Property<string>("EmergencyContactName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("emergency_contact_name");

                    b.Property<string>("EmergencyContactPhone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("emergency_contact_phone");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enrollment_date");

                    b.Property<decimal>("GPA")
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)")
                        .HasColumnName("gpa");

                    b.Property<DateTime?>("GraduationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("graduation_date");

                    b.Property<Guid?>("GroupUid")
                        .HasColumnType("uuid")
                        .HasColumnName("group_uid");

                    b.Property<Guid?>("GroupUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("group_uid1");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("MedicalInformation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("medical_information");

                    b.Property<Guid>("PersonUid")
                        .HasColumnType("uuid")
                        .HasColumnName("person_uid");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("student_code");

                    b.HasKey("Uid")
                        .HasName("pk_students");

                    b.HasIndex("CurriculumUid")
                        .HasDatabaseName("ix_students_curriculum_uid");

                    b.HasIndex("GroupUid")
                        .HasDatabaseName("ix_students_group_uid");

                    b.HasIndex("GroupUid1")
                        .HasDatabaseName("ix_students_group_uid1");

                    b.HasIndex("PersonUid")
                        .IsUnique()
                        .HasDatabaseName("ix_students_person_uid");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_students_status");

                    b.HasIndex("StudentCode")
                        .IsUnique()
                        .HasDatabaseName("ix_students_student_code");

                    b.ToTable("students", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Subject", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Credits")
                        .HasColumnType("integer")
                        .HasColumnName("credits");

                    b.Property<Guid?>("DepartmentUid")
                        .HasColumnType("uuid")
                        .HasColumnName("department_uid");

                    b.Property<Guid?>("DepartmentUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("department_uid1");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("LearningOutcomes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("learning_outcomes");

                    b.Property<int>("LessonsPerWeek")
                        .HasColumnType("integer")
                        .HasColumnName("lessons_per_week");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Prerequisites")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("prerequisites");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Uid")
                        .HasName("pk_subjects");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_subjects_code");

                    b.HasIndex("DepartmentUid")
                        .HasDatabaseName("ix_subjects_department_uid");

                    b.HasIndex("DepartmentUid1")
                        .HasDatabaseName("ix_subjects_department_uid1");

                    b.HasIndex("Type")
                        .HasDatabaseName("ix_subjects_type");

                    b.ToTable("subjects", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Submission", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("assignment_id");

                    b.Property<Guid>("AssignmentUid")
                        .HasColumnType("uuid")
                        .HasColumnName("assignment_uid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("feedback");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<Guid?>("GradedByUid")
                        .HasColumnType("uuid")
                        .HasColumnName("graded_by_uid");

                    b.Property<DateTime?>("GradedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("graded_date");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<double?>("Score")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("score");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid")
                        .HasColumnName("student_id");

                    b.Property<Guid>("StudentUid")
                        .HasColumnType("uuid")
                        .HasColumnName("student_uid");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submission_date");

                    b.HasKey("Uid")
                        .HasName("pk_submissions");

                    b.HasIndex("AssignmentUid")
                        .HasDatabaseName("ix_submissions_assignment_uid");

                    b.HasIndex("GradedByUid")
                        .HasDatabaseName("ix_submissions_graded_by_uid");

                    b.HasIndex("StudentUid", "AssignmentUid")
                        .IsUnique()
                        .HasDatabaseName("ix_submissions_student_uid_assignment_uid");

                    b.ToTable("submissions", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Teacher", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("DepartmentUid")
                        .HasColumnType("uuid")
                        .HasColumnName("department_uid");

                    b.Property<Guid?>("DepartmentUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("department_uid1");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("employee_code");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("hire_date");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("OfficeLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("office_location");

                    b.Property<Guid>("PersonUid")
                        .HasColumnType("uuid")
                        .HasColumnName("person_uid");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("qualification");

                    b.Property<decimal>("Salary")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("salary");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("specialization");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("termination_date");

                    b.Property<string>("WorkingHours")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("working_hours");

                    b.HasKey("Uid")
                        .HasName("pk_teachers");

                    b.HasIndex("DepartmentUid")
                        .HasDatabaseName("ix_teachers_department_uid");

                    b.HasIndex("DepartmentUid1")
                        .HasDatabaseName("ix_teachers_department_uid1");

                    b.HasIndex("EmployeeCode")
                        .IsUnique()
                        .HasDatabaseName("ix_teachers_employee_code");

                    b.HasIndex("PersonUid")
                        .IsUnique()
                        .HasDatabaseName("ix_teachers_person_uid");

                    b.ToTable("teachers", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.System.Attendance", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime>("CheckedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("checked_at");

                    b.Property<Guid>("CheckedByUid")
                        .HasColumnType("uuid")
                        .HasColumnName("checked_by_uid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("LessonUid")
                        .HasColumnType("uuid")
                        .HasColumnName("lesson_uid");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("StudentUid")
                        .HasColumnType("uuid")
                        .HasColumnName("student_uid");

                    b.HasKey("Uid")
                        .HasName("pk_attendances");

                    b.HasIndex("LessonUid")
                        .HasDatabaseName("ix_attendances_lesson_uid");

                    b.HasIndex("StudentUid", "LessonUid")
                        .IsUnique()
                        .HasDatabaseName("ix_attendances_student_uid_lesson_uid");

                    b.ToTable("attendances", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.System.Department", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<Guid?>("HeadOfDepartmentUid")
                        .HasColumnType("uuid")
                        .HasColumnName("head_of_department_uid");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("Uid")
                        .HasName("pk_departments");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_departments_code");

                    b.HasIndex("HeadOfDepartmentUid")
                        .HasDatabaseName("ix_departments_head_of_department_uid");

                    b.ToTable("departments", (string)null);

                    b.HasData(
                        new
                        {
                            Uid = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Code = "IT",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Кафедра информационных технологий и программирования",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Информационные технологии"
                        });
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.System.FileRecord", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("content_type");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("EntityType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("entity_type");

                    b.Property<Guid?>("EntityUid")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_uid");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("file_path");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_public");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("original_file_name");

                    b.Property<string>("StoredFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("stored_file_name");

                    b.Property<Guid>("UploadedByUid")
                        .HasColumnType("uuid")
                        .HasColumnName("uploaded_by_uid");

                    b.HasKey("Uid")
                        .HasName("pk_file_records");

                    b.HasIndex("ContentType")
                        .HasDatabaseName("ix_file_records_content_type");

                    b.HasIndex("UploadedByUid")
                        .HasDatabaseName("ix_file_records_uploaded_by_uid");

                    b.HasIndex("EntityType", "EntityUid")
                        .HasDatabaseName("ix_file_records_entity_type_entity_uid");

                    b.ToTable("file_records", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.System.Notification", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<string>("ActionUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("action_url");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<bool>("IsImportant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_important");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_read");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("message");

                    b.Property<string>("Metadata")
                        .HasColumnType("text")
                        .HasColumnName("metadata");

                    b.Property<string>("MetadataJson")
                        .HasColumnType("text")
                        .HasColumnName("metadata_json");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("read_at");

                    b.Property<Guid>("RecipientUid")
                        .HasColumnType("uuid")
                        .HasColumnName("recipient_uid");

                    b.Property<TimeSpan?>("RepeatInterval")
                        .HasColumnType("interval")
                        .HasColumnName("repeat_interval");

                    b.Property<DateTime?>("ScheduledFor")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_for");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Uid")
                        .HasName("pk_notifications");

                    b.HasIndex("SentAt")
                        .HasDatabaseName("ix_notifications_sent_at");

                    b.HasIndex("Type")
                        .HasDatabaseName("ix_notifications_type");

                    b.HasIndex("RecipientUid", "IsRead")
                        .HasDatabaseName("ix_notifications_recipient_uid_is_read");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.System.NotificationSettings", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<string>("CategorySettings")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category_settings");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("EmailNotifications")
                        .HasColumnType("boolean")
                        .HasColumnName("email_notifications");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<int>("MinimumPriority")
                        .HasColumnType("integer")
                        .HasColumnName("minimum_priority");

                    b.Property<bool>("PushNotifications")
                        .HasColumnType("boolean")
                        .HasColumnName("push_notifications");

                    b.Property<TimeSpan>("QuietHoursEnd")
                        .HasColumnType("interval")
                        .HasColumnName("quiet_hours_end");

                    b.Property<TimeSpan>("QuietHoursStart")
                        .HasColumnType("interval")
                        .HasColumnName("quiet_hours_start");

                    b.Property<bool>("SmsNotifications")
                        .HasColumnType("boolean")
                        .HasColumnName("sms_notifications");

                    b.Property<string>("TypeSettings")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type_settings");

                    b.Property<Guid>("UserUid")
                        .HasColumnType("uuid")
                        .HasColumnName("user_uid");

                    b.Property<bool>("WeekendNotifications")
                        .HasColumnType("boolean")
                        .HasColumnName("weekend_notifications");

                    b.HasKey("Uid")
                        .HasName("pk_notification_settings");

                    b.HasIndex("UserUid")
                        .HasDatabaseName("ix_notification_settings_user_uid");

                    b.ToTable("notification_settings", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.System.NotificationTemplate", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("MessageTemplate")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("message_template");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("parameters");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<string>("TitleTemplate")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title_template");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Uid")
                        .HasName("pk_notification_templates");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_notification_templates_is_active");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_notification_templates_name");

                    b.HasIndex("Type")
                        .HasDatabaseName("ix_notification_templates_type");

                    b.ToTable("notification_templates", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Auth.Account", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Auth.Person", "Person")
                        .WithOne()
                        .HasForeignKey("ViridiscaUi.Domain.Models.Auth.Account", "PersonUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_accounts_persons_person_uid");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Auth.PersonRole", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Auth.Person", "Person")
                        .WithMany("PersonRoles")
                        .HasForeignKey("PersonUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_person_roles_persons_person_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Auth.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_person_roles_roles_role_uid");

                    b.Navigation("Person");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Auth.RolePermission", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Auth.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_permissions_permission_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Auth.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionUid1")
                        .HasConstraintName("fk_role_permissions_permissions_permission_uid1");

                    b.HasOne("ViridiscaUi.Domain.Models.Auth.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_roles_role_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Auth.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleUid1")
                        .HasConstraintName("fk_role_permissions_roles_role_uid1");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Assignment", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.CourseInstance", "CourseInstance")
                        .WithMany()
                        .HasForeignKey("CourseInstanceUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assignments_course_instances_course_instance_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.CourseInstance", null)
                        .WithMany("Assignments")
                        .HasForeignKey("CourseInstanceUid1")
                        .HasConstraintName("fk_assignments_course_instances_course_instance_uid1");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonUid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_assignments_lessons_lesson_uid");

                    b.Navigation("CourseInstance");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.CourseInstance", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.AcademicPeriod", "AcademicPeriod")
                        .WithMany("CourseInstances")
                        .HasForeignKey("AcademicPeriodUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_course_instances_academic_periods_academic_period_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_course_instances_groups_group_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_course_instances_subjects_subject_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherUid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_course_instances_teachers_teacher_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Teacher", null)
                        .WithMany("CourseInstances")
                        .HasForeignKey("TeacherUid1")
                        .HasConstraintName("fk_course_instances_teachers_teacher_uid1");

                    b.Navigation("AcademicPeriod");

                    b.Navigation("Group");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.CurriculumSubject", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.Curriculum", "Curriculum")
                        .WithMany("CurriculumSubjects")
                        .HasForeignKey("CurriculumUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_curriculum_subjects_curricula_curriculum_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_curriculum_subjects_subjects_subject_uid");

                    b.Navigation("Curriculum");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Enrollment", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.CourseInstance", "CourseInstance")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseInstanceUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enrollments_course_instances_course_instance_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enrollments_students_student_uid");

                    b.Navigation("CourseInstance");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Exam", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.AcademicPeriod", null)
                        .WithMany("Exams")
                        .HasForeignKey("AcademicPeriodUid")
                        .HasConstraintName("fk_exams_academic_periods_academic_period_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.CourseInstance", "CourseInstance")
                        .WithMany()
                        .HasForeignKey("CourseInstanceUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exams_course_instances_course_instance_uid");

                    b.Navigation("CourseInstance");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.ExamResult", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.Exam", "Exam")
                        .WithMany("Results")
                        .HasForeignKey("ExamUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exam_results_exams_exam_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exam_results_students_student_uid");

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Grade", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.Assignment", "Assignment")
                        .WithMany()
                        .HasForeignKey("AssignmentUid")
                        .HasConstraintName("fk_grades_assignments_assignment_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Teacher", "GradedBy")
                        .WithMany()
                        .HasForeignKey("GradedByUid")
                        .HasConstraintName("fk_grades_teachers_graded_by_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Student", null)
                        .WithMany("Grades")
                        .HasForeignKey("StudentUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_grades_students_student_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentUid1")
                        .HasConstraintName("fk_grades_students_student_uid1");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_grades_subjects_subject_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_grades_teachers_teacher_uid");

                    b.Navigation("Assignment");

                    b.Navigation("GradedBy");

                    b.Navigation("Student");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.GradeComment", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Auth.Person", null)
                        .WithMany()
                        .HasForeignKey("AuthorUid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_grade_comment_persons_author_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Grade", null)
                        .WithMany()
                        .HasForeignKey("GradeUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_grade_comment_grades_grade_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Grade", null)
                        .WithMany("Comments")
                        .HasForeignKey("GradeUid1")
                        .HasConstraintName("fk_grade_comment_grades_grade_uid1");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.GradeRevision", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.Grade", null)
                        .WithMany()
                        .HasForeignKey("GradeUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_grade_revision_grades_grade_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Grade", null)
                        .WithMany("Revisions")
                        .HasForeignKey("GradeUid1")
                        .HasConstraintName("fk_grade_revision_grades_grade_uid1");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeacherUid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_grade_revision_teachers_teacher_uid");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Group", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.Teacher", "Curator")
                        .WithMany()
                        .HasForeignKey("CuratorUid")
                        .HasConstraintName("fk_groups_teachers_curator_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.System.Department", null)
                        .WithMany("Groups")
                        .HasForeignKey("DepartmentUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_groups_departments_department_uid");

                    b.Navigation("Curator");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Lesson", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.CourseInstance", "CourseInstance")
                        .WithMany()
                        .HasForeignKey("CourseInstanceUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lessons_course_instances_course_instance_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.CourseInstance", null)
                        .WithMany("Lessons")
                        .HasForeignKey("CourseInstanceUid1")
                        .HasConstraintName("fk_lessons_course_instances_course_instance_uid1");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupUid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_lessons_groups_group_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectUid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_lessons_subjects_subject_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeacherUid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_lessons_teachers_teacher_uid");

                    b.Navigation("CourseInstance");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.LessonProgress", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.Lesson", "Lesson")
                        .WithMany("LessonProgress")
                        .HasForeignKey("LessonUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lesson_progress_lessons_lesson_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lesson_progress_students_student_uid");

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.LibraryLoan", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Auth.Person", "Borrower")
                        .WithMany()
                        .HasForeignKey("BorrowerUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_library_loans_persons_borrower_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.LibraryResource", "Resource")
                        .WithMany("Loans")
                        .HasForeignKey("ResourceUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_library_loans_library_resources_resource_uid");

                    b.Navigation("Borrower");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.ScheduleSlot", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.CourseInstance", "CourseInstance")
                        .WithMany("ScheduleSlots")
                        .HasForeignKey("CourseInstanceUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_schedule_slots_course_instances_course_instance_uid");

                    b.Navigation("CourseInstance");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Student", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.Curriculum", "Curriculum")
                        .WithMany("Students")
                        .HasForeignKey("CurriculumUid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_students_curricula_curriculum_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupUid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_students_groups_group_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Group", null)
                        .WithMany("Students")
                        .HasForeignKey("GroupUid1")
                        .HasConstraintName("fk_students_groups_group_uid1");

                    b.HasOne("ViridiscaUi.Domain.Models.Auth.Person", "Person")
                        .WithOne()
                        .HasForeignKey("ViridiscaUi.Domain.Models.Education.Student", "PersonUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_students_persons_person_uid");

                    b.Navigation("Curriculum");

                    b.Navigation("Group");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Subject", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.System.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentUid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_subjects_departments_department_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.System.Department", "Department")
                        .WithMany("Subjects")
                        .HasForeignKey("DepartmentUid1")
                        .HasConstraintName("fk_subjects_departments_department_uid1");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Submission", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.Assignment", "Assignment")
                        .WithMany("Submissions")
                        .HasForeignKey("AssignmentUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_submissions_assignments_assignment_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Teacher", "GradedBy")
                        .WithMany()
                        .HasForeignKey("GradedByUid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_submissions_teachers_graded_by_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_submissions_students_student_uid");

                    b.Navigation("Assignment");

                    b.Navigation("GradedBy");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Teacher", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.System.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentUid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_teachers_departments_department_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.System.Department", null)
                        .WithMany("Teachers")
                        .HasForeignKey("DepartmentUid1")
                        .HasConstraintName("fk_teachers_departments_department_uid1");

                    b.HasOne("ViridiscaUi.Domain.Models.Auth.Person", "Person")
                        .WithOne()
                        .HasForeignKey("ViridiscaUi.Domain.Models.Education.Teacher", "PersonUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teachers_persons_person_uid");

                    b.Navigation("Department");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.System.Attendance", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_attendances_lessons_lesson_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Student", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_attendances_students_student_uid");

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.System.Department", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.Teacher", "HeadOfDepartment")
                        .WithMany()
                        .HasForeignKey("HeadOfDepartmentUid")
                        .HasConstraintName("fk_departments_teachers_head_of_department_uid");

                    b.Navigation("HeadOfDepartment");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.System.Notification", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Auth.Person", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notifications_persons_recipient_uid");

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.System.NotificationSettings", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Auth.Person", null)
                        .WithMany()
                        .HasForeignKey("UserUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notification_settings_persons_user_uid");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Auth.Person", b =>
                {
                    b.Navigation("PersonRoles");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.AcademicPeriod", b =>
                {
                    b.Navigation("CourseInstances");

                    b.Navigation("Exams");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Assignment", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.CourseInstance", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Enrollments");

                    b.Navigation("Lessons");

                    b.Navigation("ScheduleSlots");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Curriculum", b =>
                {
                    b.Navigation("CurriculumSubjects");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Exam", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Grade", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Revisions");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Lesson", b =>
                {
                    b.Navigation("LessonProgress");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.LibraryResource", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Student", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Enrollments");

                    b.Navigation("Grades");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Teacher", b =>
                {
                    b.Navigation("CourseInstances");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.System.Department", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Subjects");

                    b.Navigation("Teachers");
                });
#pragma warning restore 612, 618
        }
    }
}
