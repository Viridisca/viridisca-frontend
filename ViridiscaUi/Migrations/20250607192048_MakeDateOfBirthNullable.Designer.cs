// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ViridiscaUi.Infrastructure;

#nullable disable

namespace ViridiscaUi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250607192048_MakeDateOfBirthNullable")]
    partial class MakeDateOfBirthNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Auth.Account", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("integer")
                        .HasColumnName("failed_login_attempts");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_email_confirmed");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_locked");

                    b.Property<DateTime?>("LastFailedLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_failed_login_at");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<DateTime?>("LockedUntil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("locked_until");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<Guid>("PersonUid")
                        .HasColumnType("uuid")
                        .HasColumnName("person_uid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Uid")
                        .HasName("pk_accounts");

                    b.HasIndex("PersonUid")
                        .IsUnique()
                        .HasDatabaseName("ix_accounts_person_uid");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("ix_accounts_username");

                    b.ToTable("accounts", (string)null);

                    b.HasData(
                        new
                        {
                            Uid = new Guid("aaaabbbb-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            FailedLoginAttempts = 0,
                            IsActive = true,
                            IsEmailConfirmed = true,
                            IsLocked = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PasswordHash = "$2a$11$CgwKf1JhcTMiOw.bDm/cWOpHTZ2RrCeVTZekuhWApzUdeozIyLWeq",
                            PersonUid = new Guid("aaaabbbb-0000-0000-0000-000000000001"),
                            Username = "admin"
                        },
                        new
                        {
                            Uid = new Guid("bbbbbbbb-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            FailedLoginAttempts = 0,
                            IsActive = true,
                            IsEmailConfirmed = true,
                            IsLocked = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PasswordHash = "$2a$11$fvl0awRPrGMYgHufeKGUC.XAyHM6hX2Kg6O7q6kzQo.s/LZycBg9G",
                            PersonUid = new Guid("11111111-0000-0000-0000-000000000001"),
                            Username = "a.petrova"
                        },
                        new
                        {
                            Uid = new Guid("cccccccc-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            FailedLoginAttempts = 0,
                            IsActive = true,
                            IsEmailConfirmed = true,
                            IsLocked = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PasswordHash = "$2a$11$LNUbX4mJMKl0SDhEOfNDGezODA2gYwRBMhbn2uBJQUhsdc4SoG6e.",
                            PersonUid = new Guid("22222222-0000-0000-0000-000000000001"),
                            Username = "i.ivanov"
                        },
                        new
                        {
                            Uid = new Guid("dddddddd-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            FailedLoginAttempts = 0,
                            IsActive = true,
                            IsEmailConfirmed = true,
                            IsLocked = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PasswordHash = "$2a$11$JESJ6UhVtZCcLQkGe69vserhozcTlHppW/h8bZ9/JWF5vSWJlIAU6",
                            PersonUid = new Guid("33333333-0000-0000-0000-000000000002"),
                            Username = "m.sidorova"
                        });
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Auth.Permission", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Uid")
                        .HasName("pk_permissions");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_permissions_name");

                    b.ToTable("permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Uid = new Guid("10000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Неограниченный доступ ко всем функциям",
                            DisplayName = "Полный доступ к системе",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "SystemAdmin.FullAccess"
                        },
                        new
                        {
                            Uid = new Guid("10000002-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Просмотр списка пользователей",
                            DisplayName = "Просмотр пользователей",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Users.View"
                        },
                        new
                        {
                            Uid = new Guid("10000003-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Создание новых пользователей",
                            DisplayName = "Создание пользователей",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Users.Create"
                        },
                        new
                        {
                            Uid = new Guid("10000004-0000-0000-0000-000000000004"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Изменение данных пользователей",
                            DisplayName = "Редактирование пользователей",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Users.Edit"
                        },
                        new
                        {
                            Uid = new Guid("10000005-0000-0000-0000-000000000005"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Удаление пользователей из системы",
                            DisplayName = "Удаление пользователей",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Users.Delete"
                        },
                        new
                        {
                            Uid = new Guid("20000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Просмотр списка студентов",
                            DisplayName = "Просмотр студентов",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Students.View"
                        },
                        new
                        {
                            Uid = new Guid("20000002-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Регистрация новых студентов",
                            DisplayName = "Создание студентов",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Students.Create"
                        },
                        new
                        {
                            Uid = new Guid("20000003-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Изменение данных студентов",
                            DisplayName = "Редактирование студентов",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Students.Edit"
                        },
                        new
                        {
                            Uid = new Guid("20000004-0000-0000-0000-000000000004"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Удаление студентов из системы",
                            DisplayName = "Удаление студентов",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Students.Delete"
                        },
                        new
                        {
                            Uid = new Guid("30000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Просмотр списка преподавателей",
                            DisplayName = "Просмотр преподавателей",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Teachers.View"
                        },
                        new
                        {
                            Uid = new Guid("30000002-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Регистрация новых преподавателей",
                            DisplayName = "Создание преподавателей",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Teachers.Create"
                        },
                        new
                        {
                            Uid = new Guid("30000003-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Изменение данных преподавателей",
                            DisplayName = "Редактирование преподавателей",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Teachers.Edit"
                        },
                        new
                        {
                            Uid = new Guid("30000004-0000-0000-0000-000000000004"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Удаление преподавателей из системы",
                            DisplayName = "Удаление преподавателей",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Teachers.Delete"
                        },
                        new
                        {
                            Uid = new Guid("40000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Просмотр списка курсов",
                            DisplayName = "Просмотр курсов",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Courses.View"
                        },
                        new
                        {
                            Uid = new Guid("40000002-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Создание новых курсов",
                            DisplayName = "Создание курсов",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Courses.Create"
                        },
                        new
                        {
                            Uid = new Guid("40000003-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Изменение курсов",
                            DisplayName = "Редактирование курсов",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Courses.Edit"
                        },
                        new
                        {
                            Uid = new Guid("40000004-0000-0000-0000-000000000004"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Удаление курсов",
                            DisplayName = "Удаление курсов",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Courses.Delete"
                        },
                        new
                        {
                            Uid = new Guid("50000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Просмотр оценок студентов",
                            DisplayName = "Просмотр оценок",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Grades.View"
                        },
                        new
                        {
                            Uid = new Guid("50000002-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Создание новых оценок",
                            DisplayName = "Выставление оценок",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Grades.Create"
                        },
                        new
                        {
                            Uid = new Guid("50000003-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Изменение оценок",
                            DisplayName = "Редактирование оценок",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Grades.Edit"
                        },
                        new
                        {
                            Uid = new Guid("50000004-0000-0000-0000-000000000004"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Удаление оценок",
                            DisplayName = "Удаление оценок",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Grades.Delete"
                        },
                        new
                        {
                            Uid = new Guid("60000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Просмотр библиотечных ресурсов",
                            DisplayName = "Просмотр библиотеки",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Library.View"
                        },
                        new
                        {
                            Uid = new Guid("60000002-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Управление библиотечными ресурсами",
                            DisplayName = "Управление библиотекой",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Library.Manage"
                        });
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Auth.Person", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text")
                        .HasColumnName("middle_name");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("profile_image_url");

                    b.HasKey("Uid")
                        .HasName("pk_persons");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_persons_email");

                    b.ToTable("persons", (string)null);

                    b.HasData(
                        new
                        {
                            Uid = new Guid("aaaabbbb-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@viridisca.edu",
                            FirstName = "Системный",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastName = "Администратор",
                            Phone = "+7 (999) 123-45-67",
                            PhoneNumber = "+7 (999) 123-45-67"
                        },
                        new
                        {
                            Uid = new Guid("11111111-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "a.petrova@viridisca.edu",
                            FirstName = "Анна",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastName = "Петрова",
                            MiddleName = "Сергеевна",
                            Phone = "+7 (999) 234-56-78",
                            PhoneNumber = "+7 (999) 234-56-78"
                        },
                        new
                        {
                            Uid = new Guid("22222222-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(2003, 8, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "i.ivanov@student.viridisca.edu",
                            FirstName = "Иван",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastName = "Иванов",
                            MiddleName = "Петрович",
                            Phone = "+7 (999) 345-67-89",
                            PhoneNumber = "+7 (999) 345-67-89"
                        },
                        new
                        {
                            Uid = new Guid("33333333-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(2003, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "m.sidorova@student.viridisca.edu",
                            FirstName = "Мария",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastName = "Сидорова",
                            MiddleName = "Александровна",
                            Phone = "+7 (999) 456-78-90",
                            PhoneNumber = "+7 (999) 456-78-90"
                        });
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Auth.PersonRole", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_at");

                    b.Property<Guid?>("AssignedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("assigned_by");

                    b.Property<string>("Context")
                        .HasColumnType("text")
                        .HasColumnName("context");

                    b.Property<string>("ContextEntityType")
                        .HasColumnType("text")
                        .HasColumnName("context_entity_type");

                    b.Property<Guid?>("ContextEntityUid")
                        .HasColumnType("uuid")
                        .HasColumnName("context_entity_uid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<Guid>("PersonUid")
                        .HasColumnType("uuid")
                        .HasColumnName("person_uid");

                    b.Property<Guid>("RoleUid")
                        .HasColumnType("uuid")
                        .HasColumnName("role_uid");

                    b.HasKey("Uid")
                        .HasName("pk_person_roles");

                    b.HasIndex("RoleUid")
                        .HasDatabaseName("ix_person_roles_role_uid");

                    b.HasIndex("PersonUid", "RoleUid", "ContextEntityUid", "ContextEntityType")
                        .HasDatabaseName("ix_person_roles_person_uid_role_uid_context_entity_uid_context");

                    b.ToTable("person_roles", (string)null);

                    b.HasData(
                        new
                        {
                            Uid = new Guid("aaaabbbb-2222-2222-2222-222222222222"),
                            AssignedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PersonUid = new Guid("aaaabbbb-0000-0000-0000-000000000001"),
                            RoleUid = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Uid = new Guid("bbbbbbbb-2222-2222-2222-222222222222"),
                            AssignedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PersonUid = new Guid("11111111-0000-0000-0000-000000000001"),
                            RoleUid = new Guid("44444444-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            Uid = new Guid("cccccccc-2222-2222-2222-222222222222"),
                            AssignedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PersonUid = new Guid("22222222-0000-0000-0000-000000000001"),
                            RoleUid = new Guid("66666666-6666-6666-6666-666666666666")
                        },
                        new
                        {
                            Uid = new Guid("dddddddd-2222-2222-2222-222222222222"),
                            AssignedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PersonUid = new Guid("33333333-0000-0000-0000-000000000002"),
                            RoleUid = new Guid("66666666-6666-6666-6666-666666666666")
                        });
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Auth.Role", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("RoleType")
                        .HasColumnType("text")
                        .HasColumnName("role_type");

                    b.HasKey("Uid")
                        .HasName("pk_roles");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_roles_name");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Uid = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Полный доступ ко всем функциям системы",
                            DisplayName = "Системный администратор",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "SystemAdmin"
                        },
                        new
                        {
                            Uid = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Управление академическими процессами",
                            DisplayName = "Начальник учебной части",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "AcademicAffairsHead"
                        },
                        new
                        {
                            Uid = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Управление кафедрой и её ресурсами",
                            DisplayName = "Заведующий кафедрой",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "DepartmentHead"
                        },
                        new
                        {
                            Uid = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Ведение занятий и оценивание студентов",
                            DisplayName = "Преподаватель",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Teacher"
                        },
                        new
                        {
                            Uid = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Помощь в ведении занятий",
                            DisplayName = "Ассистент преподавателя",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "AssistantTeacher"
                        },
                        new
                        {
                            Uid = new Guid("66666666-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Обучение в системе",
                            DisplayName = "Студент",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Student"
                        },
                        new
                        {
                            Uid = new Guid("77777777-7777-7777-7777-777777777777"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Просмотр успеваемости ребёнка",
                            DisplayName = "Родитель",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Parent"
                        },
                        new
                        {
                            Uid = new Guid("88888888-8888-8888-8888-888888888888"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Управление библиотечными ресурсами",
                            DisplayName = "Библиотекарь",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Librarian"
                        },
                        new
                        {
                            Uid = new Guid("99999999-9999-9999-9999-999999999999"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Техническая поддержка системы",
                            DisplayName = "IT поддержка",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "ITSupport"
                        },
                        new
                        {
                            Uid = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Финансовые операции",
                            DisplayName = "Бухгалтер",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Accountant"
                        });
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Auth.RolePermission", b =>
                {
                    b.Property<Guid>("RoleUid")
                        .HasColumnType("uuid")
                        .HasColumnName("role_uid");

                    b.Property<Guid>("PermissionUid")
                        .HasColumnType("uuid")
                        .HasColumnName("permission_uid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.HasKey("RoleUid", "PermissionUid")
                        .HasName("pk_role_permissions");

                    b.HasIndex("PermissionUid")
                        .HasDatabaseName("ix_role_permissions_permission_uid");

                    b.ToTable("role_permissions", (string)null);

                    b.HasData(
                        new
                        {
                            RoleUid = new Guid("11111111-1111-1111-1111-111111111111"),
                            PermissionUid = new Guid("10000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleUid = new Guid("11111111-1111-1111-1111-111111111111"),
                            PermissionUid = new Guid("10000002-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleUid = new Guid("11111111-1111-1111-1111-111111111111"),
                            PermissionUid = new Guid("10000003-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleUid = new Guid("11111111-1111-1111-1111-111111111111"),
                            PermissionUid = new Guid("10000004-0000-0000-0000-000000000004"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleUid = new Guid("11111111-1111-1111-1111-111111111111"),
                            PermissionUid = new Guid("10000005-0000-0000-0000-000000000005"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleUid = new Guid("11111111-1111-1111-1111-111111111111"),
                            PermissionUid = new Guid("20000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleUid = new Guid("11111111-1111-1111-1111-111111111111"),
                            PermissionUid = new Guid("20000002-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleUid = new Guid("11111111-1111-1111-1111-111111111111"),
                            PermissionUid = new Guid("20000003-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleUid = new Guid("11111111-1111-1111-1111-111111111111"),
                            PermissionUid = new Guid("20000004-0000-0000-0000-000000000004"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleUid = new Guid("11111111-1111-1111-1111-111111111111"),
                            PermissionUid = new Guid("30000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleUid = new Guid("11111111-1111-1111-1111-111111111111"),
                            PermissionUid = new Guid("30000002-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleUid = new Guid("11111111-1111-1111-1111-111111111111"),
                            PermissionUid = new Guid("30000003-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleUid = new Guid("11111111-1111-1111-1111-111111111111"),
                            PermissionUid = new Guid("30000004-0000-0000-0000-000000000004"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleUid = new Guid("11111111-1111-1111-1111-111111111111"),
                            PermissionUid = new Guid("40000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleUid = new Guid("11111111-1111-1111-1111-111111111111"),
                            PermissionUid = new Guid("40000002-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleUid = new Guid("11111111-1111-1111-1111-111111111111"),
                            PermissionUid = new Guid("40000003-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleUid = new Guid("11111111-1111-1111-1111-111111111111"),
                            PermissionUid = new Guid("40000004-0000-0000-0000-000000000004"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleUid = new Guid("11111111-1111-1111-1111-111111111111"),
                            PermissionUid = new Guid("50000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleUid = new Guid("11111111-1111-1111-1111-111111111111"),
                            PermissionUid = new Guid("50000002-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleUid = new Guid("11111111-1111-1111-1111-111111111111"),
                            PermissionUid = new Guid("50000003-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleUid = new Guid("11111111-1111-1111-1111-111111111111"),
                            PermissionUid = new Guid("50000004-0000-0000-0000-000000000004"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleUid = new Guid("11111111-1111-1111-1111-111111111111"),
                            PermissionUid = new Guid("60000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleUid = new Guid("11111111-1111-1111-1111-111111111111"),
                            PermissionUid = new Guid("60000002-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleUid = new Guid("44444444-4444-4444-4444-444444444444"),
                            PermissionUid = new Guid("20000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleUid = new Guid("44444444-4444-4444-4444-444444444444"),
                            PermissionUid = new Guid("40000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleUid = new Guid("44444444-4444-4444-4444-444444444444"),
                            PermissionUid = new Guid("50000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleUid = new Guid("44444444-4444-4444-4444-444444444444"),
                            PermissionUid = new Guid("50000002-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleUid = new Guid("44444444-4444-4444-4444-444444444444"),
                            PermissionUid = new Guid("50000003-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleUid = new Guid("44444444-4444-4444-4444-444444444444"),
                            PermissionUid = new Guid("50000004-0000-0000-0000-000000000004"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleUid = new Guid("44444444-4444-4444-4444-444444444444"),
                            PermissionUid = new Guid("60000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleUid = new Guid("66666666-6666-6666-6666-666666666666"),
                            PermissionUid = new Guid("40000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleUid = new Guid("66666666-6666-6666-6666-666666666666"),
                            PermissionUid = new Guid("50000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            RoleUid = new Guid("66666666-6666-6666-6666-666666666666"),
                            PermissionUid = new Guid("60000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.AcademicPeriod", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<int>("AcademicYear")
                        .HasColumnType("integer")
                        .HasColumnName("academic_year");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_current");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Uid")
                        .HasName("pk_academic_periods");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_academic_periods_code");

                    b.HasIndex("AcademicYear", "Type")
                        .HasDatabaseName("ix_academic_periods_academic_year_type");

                    b.ToTable("academic_periods", (string)null);

                    b.HasData(
                        new
                        {
                            Uid = new Guid("aa111111-1111-1111-1111-111111111111"),
                            AcademicYear = 2024,
                            Code = "FALL2024",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EndDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            IsCurrent = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Осенний семестр 2024",
                            StartDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = 1
                        },
                        new
                        {
                            Uid = new Guid("aa222222-2222-2222-2222-222222222222"),
                            AcademicYear = 2024,
                            Code = "SPRING2025",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EndDate = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = false,
                            IsCurrent = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Весенний семестр 2025",
                            StartDate = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = 1
                        });
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Assignment", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<Guid>("CourseInstanceUid")
                        .HasColumnType("uuid")
                        .HasColumnName("course_instance_uid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer")
                        .HasColumnName("difficulty");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_date");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("instructions");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<Guid?>("LessonUid")
                        .HasColumnType("uuid")
                        .HasColumnName("lesson_uid");

                    b.Property<double>("MaxScore")
                        .HasColumnType("double precision")
                        .HasColumnName("max_score");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Uid")
                        .HasName("pk_assignments");

                    b.HasIndex("CourseInstanceUid")
                        .HasDatabaseName("ix_assignments_course_instance_uid");

                    b.HasIndex("LessonUid")
                        .HasDatabaseName("ix_assignments_lesson_uid");

                    b.ToTable("assignments", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Attendance", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime?>("CheckedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("checked_at");

                    b.Property<Guid?>("CheckedByUid")
                        .HasColumnType("uuid")
                        .HasColumnName("checked_by_uid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<Guid>("LessonUid")
                        .HasColumnType("uuid")
                        .HasColumnName("lesson_uid");

                    b.Property<Guid?>("LessonUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("lesson_uid1");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("StudentUid")
                        .HasColumnType("uuid")
                        .HasColumnName("student_uid");

                    b.HasKey("Uid")
                        .HasName("pk_attendances");

                    b.HasIndex("LessonUid")
                        .HasDatabaseName("ix_attendances_lesson_uid");

                    b.HasIndex("LessonUid1")
                        .HasDatabaseName("ix_attendances_lesson_uid1");

                    b.HasIndex("StudentUid", "LessonUid")
                        .IsUnique()
                        .HasDatabaseName("ix_attendances_student_uid_lesson_uid");

                    b.ToTable("attendances", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.CourseInstance", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<Guid>("AcademicPeriodUid")
                        .HasColumnType("uuid")
                        .HasColumnName("academic_period_uid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<Guid>("GroupUid")
                        .HasColumnType("uuid")
                        .HasColumnName("group_uid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<int>("MaxEnrollments")
                        .HasColumnType("integer")
                        .HasColumnName("max_enrollments");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("SubjectUid")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_uid");

                    b.Property<Guid>("TeacherUid")
                        .HasColumnType("uuid")
                        .HasColumnName("teacher_uid");

                    b.HasKey("Uid")
                        .HasName("pk_course_instances");

                    b.HasIndex("AcademicPeriodUid")
                        .HasDatabaseName("ix_course_instances_academic_period_uid");

                    b.HasIndex("GroupUid")
                        .HasDatabaseName("ix_course_instances_group_uid");

                    b.HasIndex("TeacherUid")
                        .HasDatabaseName("ix_course_instances_teacher_uid");

                    b.HasIndex("SubjectUid", "GroupUid", "AcademicPeriodUid")
                        .HasDatabaseName("ix_course_instances_subject_uid_group_uid_academic_period_uid");

                    b.ToTable("course_instances", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Curriculum", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("DepartmentUid")
                        .HasColumnType("uuid")
                        .HasColumnName("department_uid");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DurationMonths")
                        .HasColumnType("integer")
                        .HasColumnName("duration_months");

                    b.Property<int>("DurationSemesters")
                        .HasColumnType("integer")
                        .HasColumnName("duration_semesters");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("TotalCredits")
                        .HasColumnType("integer")
                        .HasColumnName("total_credits");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_from");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_to");

                    b.HasKey("Uid")
                        .HasName("pk_curricula");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_curricula_code");

                    b.HasIndex("DepartmentUid")
                        .HasDatabaseName("ix_curricula_department_uid");

                    b.ToTable("curricula", (string)null);

                    b.HasData(
                        new
                        {
                            Uid = new Guid("eeeeeeee-0000-0000-0000-000000000001"),
                            Code = "IT-2021",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentUid = new Guid("d1111111-1111-1111-1111-111111111111"),
                            Description = "Учебный план по направлению Информационные технологии",
                            DurationMonths = 48,
                            DurationSemesters = 0,
                            IsActive = true,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Информационные технологии 2021",
                            TotalCredits = 240,
                            ValidFrom = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.CurriculumSubject", b =>
                {
                    b.Property<Guid>("CurriculumUid")
                        .HasColumnType("uuid")
                        .HasColumnName("curriculum_uid");

                    b.Property<Guid>("SubjectUid")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_uid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Credits")
                        .HasColumnType("integer")
                        .HasColumnName("credits");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("boolean")
                        .HasColumnName("is_mandatory");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("is_required");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<int>("Semester")
                        .HasColumnType("integer")
                        .HasColumnName("semester");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.HasKey("CurriculumUid", "SubjectUid")
                        .HasName("pk_curriculum_subjects");

                    b.HasIndex("SubjectUid")
                        .HasDatabaseName("ix_curriculum_subjects_subject_uid");

                    b.ToTable("curriculum_subjects", (string)null);

                    b.HasData(
                        new
                        {
                            CurriculumUid = new Guid("eeeeeeee-0000-0000-0000-000000000001"),
                            SubjectUid = new Guid("aaaaaaaa-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Credits = 4,
                            IsMandatory = true,
                            IsRequired = true,
                            Semester = 1,
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            CurriculumUid = new Guid("eeeeeeee-0000-0000-0000-000000000001"),
                            SubjectUid = new Guid("bbbbbbbb-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Credits = 5,
                            IsMandatory = true,
                            IsRequired = true,
                            Semester = 1,
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            CurriculumUid = new Guid("eeeeeeee-0000-0000-0000-000000000001"),
                            SubjectUid = new Guid("cccccccc-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Credits = 3,
                            IsMandatory = false,
                            IsRequired = false,
                            Semester = 2,
                            Uid = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Enrollment", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completion_date");

                    b.Property<Guid>("CourseInstanceUid")
                        .HasColumnType("uuid")
                        .HasColumnName("course_instance_uid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enrollment_date");

                    b.Property<decimal?>("FinalGrade")
                        .HasColumnType("numeric")
                        .HasColumnName("final_grade");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("StudentUid")
                        .HasColumnType("uuid")
                        .HasColumnName("student_uid");

                    b.HasKey("Uid")
                        .HasName("pk_enrollments");

                    b.HasIndex("CourseInstanceUid")
                        .HasDatabaseName("ix_enrollments_course_instance_uid");

                    b.HasIndex("StudentUid", "CourseInstanceUid")
                        .IsUnique()
                        .HasDatabaseName("ix_enrollments_student_uid_course_instance_uid");

                    b.ToTable("enrollments", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Exam", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<Guid>("AcademicPeriodUid")
                        .HasColumnType("uuid")
                        .HasColumnName("academic_period_uid");

                    b.Property<Guid>("CourseInstanceUid")
                        .HasColumnType("uuid")
                        .HasColumnName("course_instance_uid");

                    b.Property<Guid?>("CourseInstanceUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("course_instance_uid1");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("exam_date");

                    b.Property<string>("Instructions")
                        .HasColumnType("text")
                        .HasColumnName("instructions");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean")
                        .HasColumnName("is_published");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<decimal>("MaxScore")
                        .HasColumnType("numeric")
                        .HasColumnName("max_score");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Uid")
                        .HasName("pk_exams");

                    b.HasIndex("AcademicPeriodUid")
                        .HasDatabaseName("ix_exams_academic_period_uid");

                    b.HasIndex("CourseInstanceUid")
                        .HasDatabaseName("ix_exams_course_instance_uid");

                    b.HasIndex("CourseInstanceUid1")
                        .HasDatabaseName("ix_exams_course_instance_uid1");

                    b.ToTable("exams", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.ExamResult", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ExamUid")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_uid");

                    b.Property<string>("Feedback")
                        .HasColumnType("text")
                        .HasColumnName("feedback");

                    b.Property<DateTime?>("GradedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("graded_at");

                    b.Property<bool>("IsAbsent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_absent");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<decimal>("Score")
                        .HasColumnType("numeric")
                        .HasColumnName("score");

                    b.Property<Guid>("StudentUid")
                        .HasColumnType("uuid")
                        .HasColumnName("student_uid");

                    b.Property<Guid?>("StudentUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("student_uid1");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submitted_at");

                    b.HasKey("Uid")
                        .HasName("pk_exam_results");

                    b.HasIndex("StudentUid")
                        .HasDatabaseName("ix_exam_results_student_uid");

                    b.HasIndex("StudentUid1")
                        .HasDatabaseName("ix_exam_results_student_uid1");

                    b.HasIndex("ExamUid", "StudentUid")
                        .IsUnique()
                        .HasDatabaseName("ix_exam_results_exam_uid_student_uid");

                    b.ToTable("exam_results", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Grade", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<Guid?>("AssignmentUid")
                        .HasColumnType("uuid")
                        .HasColumnName("assignment_uid");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<Guid>("CourseInstanceUid")
                        .HasColumnType("uuid")
                        .HasColumnName("course_instance_uid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("ExamUid")
                        .HasColumnType("uuid")
                        .HasColumnName("exam_uid");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean")
                        .HasColumnName("is_published");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("issued_at");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<decimal?>("MaxValue")
                        .HasColumnType("numeric")
                        .HasColumnName("max_value");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_at");

                    b.Property<Guid>("StudentUid")
                        .HasColumnType("uuid")
                        .HasColumnName("student_uid");

                    b.Property<Guid>("SubjectUid")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_uid");

                    b.Property<Guid>("TeacherUid")
                        .HasColumnType("uuid")
                        .HasColumnName("teacher_uid");

                    b.Property<Guid?>("TeacherUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("teacher_uid1");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric")
                        .HasColumnName("weight");

                    b.HasKey("Uid")
                        .HasName("pk_grades");

                    b.HasIndex("AssignmentUid")
                        .HasDatabaseName("ix_grades_assignment_uid");

                    b.HasIndex("CourseInstanceUid")
                        .HasDatabaseName("ix_grades_course_instance_uid");

                    b.HasIndex("ExamUid")
                        .HasDatabaseName("ix_grades_exam_uid");

                    b.HasIndex("StudentUid")
                        .HasDatabaseName("ix_grades_student_uid");

                    b.HasIndex("SubjectUid")
                        .HasDatabaseName("ix_grades_subject_uid");

                    b.HasIndex("TeacherUid")
                        .HasDatabaseName("ix_grades_teacher_uid");

                    b.HasIndex("TeacherUid1")
                        .HasDatabaseName("ix_grades_teacher_uid1");

                    b.ToTable("grades", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Group", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CuratorUid")
                        .HasColumnType("uuid")
                        .HasColumnName("curator_uid");

                    b.Property<Guid?>("CuratorUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("curator_uid1");

                    b.Property<Guid?>("CurriculumUid")
                        .HasColumnType("uuid")
                        .HasColumnName("curriculum_uid");

                    b.Property<Guid>("DepartmentUid")
                        .HasColumnType("uuid")
                        .HasColumnName("department_uid");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<int>("MaxStudents")
                        .HasColumnType("integer")
                        .HasColumnName("max_students");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Uid")
                        .HasName("pk_groups");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_groups_code");

                    b.HasIndex("CuratorUid")
                        .HasDatabaseName("ix_groups_curator_uid");

                    b.HasIndex("CuratorUid1")
                        .HasDatabaseName("ix_groups_curator_uid1");

                    b.HasIndex("CurriculumUid")
                        .HasDatabaseName("ix_groups_curriculum_uid");

                    b.HasIndex("DepartmentUid")
                        .HasDatabaseName("ix_groups_department_uid");

                    b.ToTable("groups", (string)null);

                    b.HasData(
                        new
                        {
                            Uid = new Guid("dddddddd-0000-0000-0000-000000000001"),
                            Code = "IT-21-1",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentUid = new Guid("d1111111-1111-1111-1111-111111111111"),
                            IsActive = true,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MaxStudents = 0,
                            Name = "Информационные технологии 2021, группа 1",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Year = 0
                        });
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Lesson", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid>("CourseInstanceUid")
                        .HasColumnType("uuid")
                        .HasColumnName("course_instance_uid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean")
                        .HasColumnName("is_published");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer")
                        .HasColumnName("order_index");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Uid")
                        .HasName("pk_lessons");

                    b.HasIndex("CourseInstanceUid")
                        .HasDatabaseName("ix_lessons_course_instance_uid");

                    b.ToTable("lessons", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.LessonProgress", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<decimal>("CompletionPercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("completion_percentage");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Feedback")
                        .HasColumnType("text")
                        .HasColumnName("feedback");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_completed");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<Guid>("LessonUid")
                        .HasColumnType("uuid")
                        .HasColumnName("lesson_uid");

                    b.Property<Guid?>("LessonUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("lesson_uid1");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("StudentUid")
                        .HasColumnType("uuid")
                        .HasColumnName("student_uid");

                    b.Property<Guid?>("StudentUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("student_uid1");

                    b.Property<int>("TimeSpentMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("time_spent_minutes");

                    b.HasKey("Uid")
                        .HasName("pk_lesson_progresses");

                    b.HasIndex("LessonUid")
                        .HasDatabaseName("ix_lesson_progresses_lesson_uid");

                    b.HasIndex("LessonUid1")
                        .HasDatabaseName("ix_lesson_progresses_lesson_uid1");

                    b.HasIndex("StudentUid1")
                        .HasDatabaseName("ix_lesson_progresses_student_uid1");

                    b.HasIndex("StudentUid", "LessonUid")
                        .IsUnique()
                        .HasDatabaseName("ix_lesson_progresses_student_uid_lesson_uid");

                    b.ToTable("lesson_progresses", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.ScheduleSlot", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<Guid>("CourseInstanceUid")
                        .HasColumnType("uuid")
                        .HasColumnName("course_instance_uid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer")
                        .HasColumnName("day_of_week");

                    b.Property<DateOnly>("EffectiveFrom")
                        .HasColumnType("date")
                        .HasColumnName("effective_from");

                    b.Property<DateOnly>("EffectiveTo")
                        .HasColumnType("date")
                        .HasColumnName("effective_to");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("Room")
                        .HasColumnType("text")
                        .HasColumnName("room");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("start_time");

                    b.HasKey("Uid")
                        .HasName("pk_schedule_slots");

                    b.HasIndex("CourseInstanceUid", "DayOfWeek", "StartTime")
                        .HasDatabaseName("ix_schedule_slots_course_instance_uid_day_of_week_start_time");

                    b.ToTable("schedule_slots", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Student", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CurriculumUid")
                        .HasColumnType("uuid")
                        .HasColumnName("curriculum_uid");

                    b.Property<Guid?>("CurriculumUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("curriculum_uid1");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enrollment_date");

                    b.Property<decimal>("GPA")
                        .HasColumnType("numeric")
                        .HasColumnName("gpa");

                    b.Property<DateTime?>("GraduationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("graduation_date");

                    b.Property<Guid?>("GroupUid")
                        .HasColumnType("uuid")
                        .HasColumnName("group_uid");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<Guid>("PersonUid")
                        .HasColumnType("uuid")
                        .HasColumnName("person_uid");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("student_code");

                    b.HasKey("Uid")
                        .HasName("pk_students");

                    b.HasIndex("CurriculumUid")
                        .HasDatabaseName("ix_students_curriculum_uid");

                    b.HasIndex("CurriculumUid1")
                        .HasDatabaseName("ix_students_curriculum_uid1");

                    b.HasIndex("GroupUid")
                        .HasDatabaseName("ix_students_group_uid");

                    b.HasIndex("PersonUid")
                        .IsUnique()
                        .HasDatabaseName("ix_students_person_uid");

                    b.HasIndex("StudentCode")
                        .IsUnique()
                        .HasDatabaseName("ix_students_student_code");

                    b.ToTable("students", (string)null);

                    b.HasData(
                        new
                        {
                            Uid = new Guid("ffffffff-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurriculumUid = new Guid("eeeeeeee-0000-0000-0000-000000000001"),
                            EnrollmentDate = new DateTime(2021, 9, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            GPA = 4.2m,
                            GroupUid = new Guid("dddddddd-0000-0000-0000-000000000001"),
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PersonUid = new Guid("22222222-0000-0000-0000-000000000001"),
                            Status = 1,
                            StudentCode = "S2021001"
                        },
                        new
                        {
                            Uid = new Guid("aaaabbbb-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurriculumUid = new Guid("eeeeeeee-0000-0000-0000-000000000001"),
                            EnrollmentDate = new DateTime(2021, 9, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            GPA = 3.8m,
                            GroupUid = new Guid("dddddddd-0000-0000-0000-000000000001"),
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PersonUid = new Guid("33333333-0000-0000-0000-000000000002"),
                            Status = 1,
                            StudentCode = "S2021002"
                        });
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Subject", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Credits")
                        .HasColumnType("integer")
                        .HasColumnName("credits");

                    b.Property<Guid?>("DepartmentUid")
                        .HasColumnType("uuid")
                        .HasColumnName("department_uid");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("LearningOutcomes")
                        .HasColumnType("text")
                        .HasColumnName("learning_outcomes");

                    b.Property<int>("LessonsPerWeek")
                        .HasColumnType("integer")
                        .HasColumnName("lessons_per_week");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Prerequisites")
                        .HasColumnType("text")
                        .HasColumnName("prerequisites");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Uid")
                        .HasName("pk_subjects");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_subjects_code");

                    b.HasIndex("DepartmentUid")
                        .HasDatabaseName("ix_subjects_department_uid");

                    b.ToTable("subjects", (string)null);

                    b.HasData(
                        new
                        {
                            Uid = new Guid("aaaaaaaa-0000-0000-0000-000000000001"),
                            Code = "CS101",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Credits = 4,
                            DepartmentUid = new Guid("d1111111-1111-1111-1111-111111111111"),
                            Description = "Введение в программирование на C#",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LessonsPerWeek = 1,
                            Name = "Основы программирования",
                            Type = 1
                        },
                        new
                        {
                            Uid = new Guid("bbbbbbbb-0000-0000-0000-000000000002"),
                            Code = "MATH201",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Credits = 5,
                            DepartmentUid = new Guid("d2222222-2222-2222-2222-222222222222"),
                            Description = "Математический анализ и линейная алгебра",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LessonsPerWeek = 1,
                            Name = "Высшая математика",
                            Type = 1
                        },
                        new
                        {
                            Uid = new Guid("cccccccc-0000-0000-0000-000000000003"),
                            Code = "ENG101",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Credits = 3,
                            DepartmentUid = new Guid("d4444444-4444-4444-4444-444444444444"),
                            Description = "Базовый курс английского языка",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LessonsPerWeek = 1,
                            Name = "Английский язык",
                            Type = 2
                        });
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Submission", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<Guid>("AssignmentUid")
                        .HasColumnType("uuid")
                        .HasColumnName("assignment_uid");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Feedback")
                        .HasColumnType("text")
                        .HasColumnName("feedback");

                    b.Property<Guid?>("GradeUid")
                        .HasColumnType("uuid")
                        .HasColumnName("grade_uid");

                    b.Property<Guid?>("GradedByUid")
                        .HasColumnType("uuid")
                        .HasColumnName("graded_by_uid");

                    b.Property<DateTime?>("GradedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("graded_date");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<double?>("Score")
                        .HasColumnType("double precision")
                        .HasColumnName("score");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("StudentUid")
                        .HasColumnType("uuid")
                        .HasColumnName("student_uid");

                    b.Property<Guid?>("StudentUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("student_uid1");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submission_date");

                    b.HasKey("Uid")
                        .HasName("pk_submissions");

                    b.HasIndex("AssignmentUid")
                        .HasDatabaseName("ix_submissions_assignment_uid");

                    b.HasIndex("GradeUid")
                        .HasDatabaseName("ix_submissions_grade_uid");

                    b.HasIndex("GradedByUid")
                        .HasDatabaseName("ix_submissions_graded_by_uid");

                    b.HasIndex("StudentUid")
                        .HasDatabaseName("ix_submissions_student_uid");

                    b.HasIndex("StudentUid1")
                        .HasDatabaseName("ix_submissions_student_uid1");

                    b.ToTable("submissions", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Teacher", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<string>("AcademicDegree")
                        .HasColumnType("text")
                        .HasColumnName("academic_degree");

                    b.Property<string>("AcademicTitle")
                        .HasColumnType("text")
                        .HasColumnName("academic_title");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("DepartmentUid")
                        .HasColumnType("uuid")
                        .HasColumnName("department_uid");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("employee_code");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("hire_date");

                    b.Property<decimal?>("HourlyRate")
                        .HasColumnType("numeric")
                        .HasColumnName("hourly_rate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("OfficeLocation")
                        .HasColumnType("text")
                        .HasColumnName("office_location");

                    b.Property<Guid>("PersonUid")
                        .HasColumnType("uuid")
                        .HasColumnName("person_uid");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("qualification");

                    b.Property<decimal>("Salary")
                        .HasColumnType("numeric")
                        .HasColumnName("salary");

                    b.Property<string>("Specialization")
                        .HasColumnType("text")
                        .HasColumnName("specialization");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("termination_date");

                    b.Property<string>("WorkingHours")
                        .HasColumnType("text")
                        .HasColumnName("working_hours");

                    b.HasKey("Uid")
                        .HasName("pk_teachers");

                    b.HasIndex("DepartmentUid")
                        .HasDatabaseName("ix_teachers_department_uid");

                    b.HasIndex("EmployeeCode")
                        .IsUnique()
                        .HasDatabaseName("ix_teachers_employee_code");

                    b.HasIndex("PersonUid")
                        .IsUnique()
                        .HasDatabaseName("ix_teachers_person_uid");

                    b.ToTable("teachers", (string)null);

                    b.HasData(
                        new
                        {
                            Uid = new Guid("bbbbbbbb-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DepartmentUid = new Guid("d1111111-1111-1111-1111-111111111111"),
                            EmployeeCode = "T001",
                            HireDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PersonUid = new Guid("11111111-0000-0000-0000-000000000001"),
                            Qualification = "Кандидат технических наук",
                            Salary = 75000m
                        });
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Library.LibraryLoan", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_date");

                    b.Property<decimal>("FineAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("fine_amount");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<DateTime>("LoanedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("loaned_at");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<Guid>("PersonUid")
                        .HasColumnType("uuid")
                        .HasColumnName("person_uid");

                    b.Property<Guid>("ResourceUid")
                        .HasColumnType("uuid")
                        .HasColumnName("resource_uid");

                    b.Property<DateTime?>("ReturnedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("returned_at");

                    b.HasKey("Uid")
                        .HasName("pk_library_loans");

                    b.HasIndex("PersonUid")
                        .HasDatabaseName("ix_library_loans_person_uid");

                    b.HasIndex("ResourceUid")
                        .HasDatabaseName("ix_library_loans_resource_uid");

                    b.ToTable("library_loans", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Library.LibraryResource", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<string>("Author")
                        .HasColumnType("text")
                        .HasColumnName("author");

                    b.Property<int>("AvailableCopies")
                        .HasColumnType("integer")
                        .HasColumnName("available_copies");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DigitalUrl")
                        .HasColumnType("text")
                        .HasColumnName("digital_url");

                    b.Property<string>("ISBN")
                        .HasColumnType("text")
                        .HasColumnName("isbn");

                    b.Property<bool>("IsDigital")
                        .HasColumnType("boolean")
                        .HasColumnName("is_digital");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_date");

                    b.Property<string>("Publisher")
                        .HasColumnType("text")
                        .HasColumnName("publisher");

                    b.Property<int>("ResourceType")
                        .HasColumnType("integer")
                        .HasColumnName("resource_type");

                    b.Property<string>("Tags")
                        .HasColumnType("text")
                        .HasColumnName("tags");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("TotalCopies")
                        .HasColumnType("integer")
                        .HasColumnName("total_copies");

                    b.HasKey("Uid")
                        .HasName("pk_library_resources");

                    b.HasIndex("ISBN")
                        .HasDatabaseName("ix_library_resources_isbn");

                    b.ToTable("library_resources", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.System.Department", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("HeadOfDepartmentUid")
                        .HasColumnType("uuid")
                        .HasColumnName("head_of_department_uid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Uid")
                        .HasName("pk_departments");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_departments_code");

                    b.HasIndex("HeadOfDepartmentUid")
                        .HasDatabaseName("ix_departments_head_of_department_uid");

                    b.ToTable("departments", (string)null);

                    b.HasData(
                        new
                        {
                            Uid = new Guid("d1111111-1111-1111-1111-111111111111"),
                            Code = "IT",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Кафедра информационных технологий и программирования",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Информационные технологии"
                        },
                        new
                        {
                            Uid = new Guid("d2222222-2222-2222-2222-222222222222"),
                            Code = "MATH",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Кафедра математики и статистики",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Математика"
                        },
                        new
                        {
                            Uid = new Guid("d3333333-3333-3333-3333-333333333333"),
                            Code = "PHYS",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Кафедра физики и естественных наук",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Физика"
                        },
                        new
                        {
                            Uid = new Guid("d4444444-4444-4444-4444-444444444444"),
                            Code = "LANG",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Кафедра иностранных языков",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Иностранные языки"
                        },
                        new
                        {
                            Uid = new Guid("d5555555-5555-5555-5555-555555555555"),
                            Code = "ECON",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Кафедра экономики и менеджмента",
                            IsActive = true,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Экономика"
                        });
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.System.FileRecord", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("EntityType")
                        .HasColumnType("text")
                        .HasColumnName("entity_type");

                    b.Property<Guid?>("EntityUid")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_uid");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("original_file_name");

                    b.Property<string>("StoredFileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("stored_file_name");

                    b.Property<Guid>("UploadedByUid")
                        .HasColumnType("uuid")
                        .HasColumnName("uploaded_by_uid");

                    b.HasKey("Uid")
                        .HasName("pk_file_records");

                    b.HasIndex("FilePath")
                        .HasDatabaseName("ix_file_records_file_path");

                    b.HasIndex("UploadedByUid")
                        .HasDatabaseName("ix_file_records_uploaded_by_uid");

                    b.ToTable("file_records", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.System.Notification", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<string>("ActionUrl")
                        .HasColumnType("text")
                        .HasColumnName("action_url");

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("MetadataJson")
                        .HasColumnType("text")
                        .HasColumnName("metadata_json");

                    b.Property<Guid>("PersonUid")
                        .HasColumnType("uuid")
                        .HasColumnName("person_uid");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("read_at");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at");

                    b.Property<Guid?>("TemplateUid")
                        .HasColumnType("uuid")
                        .HasColumnName("template_uid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Uid")
                        .HasName("pk_notifications");

                    b.HasIndex("TemplateUid")
                        .HasDatabaseName("ix_notifications_template_uid");

                    b.HasIndex("PersonUid", "CreatedAt")
                        .HasDatabaseName("ix_notifications_person_uid_created_at");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.System.NotificationSettings", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("EmailNotifications")
                        .HasColumnType("boolean")
                        .HasColumnName("email_notifications");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<int>("MinimumPriority")
                        .HasColumnType("integer")
                        .HasColumnName("minimum_priority");

                    b.Property<Guid>("PersonUid")
                        .HasColumnType("uuid")
                        .HasColumnName("person_uid");

                    b.Property<bool>("PushNotifications")
                        .HasColumnType("boolean")
                        .HasColumnName("push_notifications");

                    b.Property<bool>("SmsNotifications")
                        .HasColumnType("boolean")
                        .HasColumnName("sms_notifications");

                    b.Property<string>("TypeSettingsJson")
                        .HasColumnType("text")
                        .HasColumnName("type_settings_json");

                    b.Property<Guid>("UserUid")
                        .HasColumnType("uuid")
                        .HasColumnName("user_uid");

                    b.HasKey("Uid")
                        .HasName("pk_notification_settings");

                    b.HasIndex("PersonUid")
                        .IsUnique()
                        .HasDatabaseName("ix_notification_settings_person_uid");

                    b.ToTable("notification_settings", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.System.NotificationTemplate", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("MessageTemplate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message_template");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ParametersJson")
                        .HasColumnType("text")
                        .HasColumnName("parameters_json");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<string>("TitleTemplate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title_template");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Uid")
                        .HasName("pk_notification_templates");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_notification_templates_name");

                    b.ToTable("notification_templates", (string)null);

                    b.HasData(
                        new
                        {
                            Uid = new Guid("b1111111-1111-1111-1111-111111111111"),
                            Category = "Welcome",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MessageTemplate = "Здравствуйте, {StudentName}! Добро пожаловать в систему управления обучением Viridisca LMS. Ваш логин: {Username}",
                            Name = "WelcomeStudent",
                            Priority = 1,
                            TitleTemplate = "Добро пожаловать в Viridisca LMS!",
                            Type = 0
                        },
                        new
                        {
                            Uid = new Guid("b2222222-2222-2222-2222-222222222222"),
                            Category = "Academic",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MessageTemplate = "Здравствуйте, {StudentName}! По предмету '{CourseName}' выставлена новая оценка: {Grade}",
                            Name = "GradePublished",
                            Priority = 1,
                            TitleTemplate = "Новая оценка",
                            Type = 0
                        },
                        new
                        {
                            Uid = new Guid("b3333333-3333-3333-3333-333333333333"),
                            Category = "Reminder",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MessageTemplate = "Здравствуйте, {StudentName}! Напоминаем, что задание '{AssignmentName}' должно быть сдано до {DueDate}",
                            Name = "AssignmentDue",
                            Priority = 1,
                            TitleTemplate = "Напоминание о задании",
                            Type = 0
                        });
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.System.SystemSetting", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data_type");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Uid")
                        .HasName("pk_system_settings");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasDatabaseName("ix_system_settings_key");

                    b.ToTable("system_settings", (string)null);

                    b.HasData(
                        new
                        {
                            Uid = new Guid("a1111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DataType = "string",
                            Description = "Название системы",
                            IsSystem = false,
                            Key = "System.Name",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Viridisca LMS"
                        },
                        new
                        {
                            Uid = new Guid("a2222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DataType = "string",
                            Description = "Версия системы",
                            IsSystem = false,
                            Key = "System.Version",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "1.0.0"
                        },
                        new
                        {
                            Uid = new Guid("a3333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DataType = "string",
                            Description = "Количество кредитов по умолчанию для предмета",
                            IsSystem = false,
                            Key = "Academic.DefaultCredits",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "3"
                        },
                        new
                        {
                            Uid = new Guid("a4444444-4444-4444-4444-444444444444"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DataType = "string",
                            Description = "Максимальная оценка в системе",
                            IsSystem = false,
                            Key = "Academic.MaxGrade",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "5.0"
                        },
                        new
                        {
                            Uid = new Guid("a5555555-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DataType = "string",
                            Description = "Минимальная проходная оценка",
                            IsSystem = false,
                            Key = "Academic.MinPassingGrade",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "2.5"
                        },
                        new
                        {
                            Uid = new Guid("a6666666-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DataType = "string",
                            Description = "Максимальный срок займа библиотечного ресурса (дни)",
                            IsSystem = false,
                            Key = "Library.MaxLoanDays",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "30"
                        },
                        new
                        {
                            Uid = new Guid("a7777777-7777-7777-7777-777777777777"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DataType = "string",
                            Description = "Включены ли email уведомления",
                            IsSystem = false,
                            Key = "Notification.EmailEnabled",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Value = "true"
                        });
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Auth.Account", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Auth.Person", "Person")
                        .WithOne("Account")
                        .HasForeignKey("ViridiscaUi.Domain.Models.Auth.Account", "PersonUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_accounts_persons_person_uid");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Auth.PersonRole", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Auth.Person", "Person")
                        .WithMany("PersonRoles")
                        .HasForeignKey("PersonUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_person_roles_persons_person_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Auth.Role", "Role")
                        .WithMany("PersonRoles")
                        .HasForeignKey("RoleUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_person_roles_roles_role_uid");

                    b.Navigation("Person");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Auth.RolePermission", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Auth.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_permissions_permission_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Auth.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_roles_role_uid");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Assignment", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.CourseInstance", "CourseInstance")
                        .WithMany("Assignments")
                        .HasForeignKey("CourseInstanceUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assignments_course_instances_course_instance_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonUid")
                        .HasConstraintName("fk_assignments_lessons_lesson_uid");

                    b.Navigation("CourseInstance");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Attendance", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_attendances_lessons_lesson_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Lesson", null)
                        .WithMany("Attendances")
                        .HasForeignKey("LessonUid1")
                        .HasConstraintName("fk_attendances_lessons_lesson_uid1");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Student", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_attendances_students_student_uid");

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.CourseInstance", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.AcademicPeriod", "AcademicPeriod")
                        .WithMany("CourseInstances")
                        .HasForeignKey("AcademicPeriodUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_course_instances_academic_periods_academic_period_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_course_instances_groups_group_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Subject", "Subject")
                        .WithMany("CourseInstances")
                        .HasForeignKey("SubjectUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_course_instances_subjects_subject_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Teacher", "Teacher")
                        .WithMany("CourseInstances")
                        .HasForeignKey("TeacherUid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_course_instances_teachers_teacher_uid");

                    b.Navigation("AcademicPeriod");

                    b.Navigation("Group");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Curriculum", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.System.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentUid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_curricula_departments_department_uid");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.CurriculumSubject", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.Curriculum", "Curriculum")
                        .WithMany("CurriculumSubjects")
                        .HasForeignKey("CurriculumUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_curriculum_subjects_curricula_curriculum_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Subject", "Subject")
                        .WithMany("CurriculumSubjects")
                        .HasForeignKey("SubjectUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_curriculum_subjects_subjects_subject_uid");

                    b.Navigation("Curriculum");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Enrollment", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.CourseInstance", "CourseInstance")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseInstanceUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enrollments_course_instances_course_instance_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enrollments_students_student_uid");

                    b.Navigation("CourseInstance");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Exam", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.AcademicPeriod", "AcademicPeriod")
                        .WithMany("Exams")
                        .HasForeignKey("AcademicPeriodUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exams_academic_periods_academic_period_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.CourseInstance", "CourseInstance")
                        .WithMany()
                        .HasForeignKey("CourseInstanceUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exams_course_instances_course_instance_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.CourseInstance", null)
                        .WithMany("Exams")
                        .HasForeignKey("CourseInstanceUid1")
                        .HasConstraintName("fk_exams_course_instances_course_instance_uid1");

                    b.Navigation("AcademicPeriod");

                    b.Navigation("CourseInstance");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.ExamResult", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.Exam", "Exam")
                        .WithMany("Results")
                        .HasForeignKey("ExamUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exam_results_exams_exam_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exam_results_students_student_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Student", null)
                        .WithMany("ExamResults")
                        .HasForeignKey("StudentUid1")
                        .HasConstraintName("fk_exam_results_students_student_uid1");

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Grade", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.Assignment", "Assignment")
                        .WithMany()
                        .HasForeignKey("AssignmentUid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_grades_assignments_assignment_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.CourseInstance", "CourseInstance")
                        .WithMany()
                        .HasForeignKey("CourseInstanceUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_grades_course_instances_course_instance_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamUid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_grades_exams_exam_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_grades_students_student_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectUid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_grades_subjects_subject_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherUid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_grades_teachers_teacher_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Teacher", null)
                        .WithMany("GradedMarks")
                        .HasForeignKey("TeacherUid1")
                        .HasConstraintName("fk_grades_teachers_teacher_uid1");

                    b.Navigation("Assignment");

                    b.Navigation("CourseInstance");

                    b.Navigation("Exam");

                    b.Navigation("Student");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Group", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.Teacher", null)
                        .WithMany()
                        .HasForeignKey("CuratorUid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_groups_teachers_curator_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Teacher", "Curator")
                        .WithMany()
                        .HasForeignKey("CuratorUid1")
                        .HasConstraintName("fk_groups_teachers_curator_uid1");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Curriculum", null)
                        .WithMany("Groups")
                        .HasForeignKey("CurriculumUid")
                        .HasConstraintName("fk_groups_curricula_curriculum_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.System.Department", "Department")
                        .WithMany("Groups")
                        .HasForeignKey("DepartmentUid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_groups_departments_department_uid");

                    b.Navigation("Curator");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Lesson", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.CourseInstance", "CourseInstance")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseInstanceUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lessons_course_instances_course_instance_uid");

                    b.Navigation("CourseInstance");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.LessonProgress", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.Lesson", "Lesson")
                        .WithMany("LessonProgress")
                        .HasForeignKey("LessonUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lesson_progresses_lessons_lesson_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Lesson", null)
                        .WithMany("LessonProgresses")
                        .HasForeignKey("LessonUid1")
                        .HasConstraintName("fk_lesson_progresses_lessons_lesson_uid1");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lesson_progresses_students_student_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Student", null)
                        .WithMany("LessonProgresses")
                        .HasForeignKey("StudentUid1")
                        .HasConstraintName("fk_lesson_progresses_students_student_uid1");

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.ScheduleSlot", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.CourseInstance", "CourseInstance")
                        .WithMany("ScheduleSlots")
                        .HasForeignKey("CourseInstanceUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_schedule_slots_course_instances_course_instance_uid");

                    b.Navigation("CourseInstance");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Student", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.Curriculum", "Curriculum")
                        .WithMany()
                        .HasForeignKey("CurriculumUid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_students_curricula_curriculum_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Curriculum", null)
                        .WithMany("Students")
                        .HasForeignKey("CurriculumUid1")
                        .HasConstraintName("fk_students_curricula_curriculum_uid1");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupUid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_students_groups_group_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Auth.Person", "Person")
                        .WithOne()
                        .HasForeignKey("ViridiscaUi.Domain.Models.Education.Student", "PersonUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_students_persons_person_uid");

                    b.Navigation("Curriculum");

                    b.Navigation("Group");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Subject", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.System.Department", "Department")
                        .WithMany("Subjects")
                        .HasForeignKey("DepartmentUid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_subjects_departments_department_uid");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Submission", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.Assignment", "Assignment")
                        .WithMany("Submissions")
                        .HasForeignKey("AssignmentUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_submissions_assignments_assignment_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Grade", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeUid")
                        .HasConstraintName("fk_submissions_grades_grade_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Teacher", "GradedBy")
                        .WithMany()
                        .HasForeignKey("GradedByUid")
                        .HasConstraintName("fk_submissions_teachers_graded_by_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_submissions_students_student_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Student", null)
                        .WithMany("Submissions")
                        .HasForeignKey("StudentUid1")
                        .HasConstraintName("fk_submissions_students_student_uid1");

                    b.Navigation("Assignment");

                    b.Navigation("Grade");

                    b.Navigation("GradedBy");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Teacher", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.System.Department", "Department")
                        .WithMany("Teachers")
                        .HasForeignKey("DepartmentUid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_teachers_departments_department_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Auth.Person", "Person")
                        .WithOne()
                        .HasForeignKey("ViridiscaUi.Domain.Models.Education.Teacher", "PersonUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teachers_persons_person_uid");

                    b.Navigation("Department");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Library.LibraryLoan", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Auth.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonUid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_library_loans_persons_person_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Library.LibraryResource", "Resource")
                        .WithMany("Loans")
                        .HasForeignKey("ResourceUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_library_loans_library_resources_resource_uid");

                    b.Navigation("Person");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.System.Department", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.Teacher", "HeadOfDepartment")
                        .WithMany()
                        .HasForeignKey("HeadOfDepartmentUid")
                        .HasConstraintName("fk_departments_teachers_head_of_department_uid");

                    b.Navigation("HeadOfDepartment");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.System.FileRecord", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Auth.Person", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedByUid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_file_records_persons_uploaded_by_uid");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.System.Notification", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Auth.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notifications_persons_person_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.System.NotificationTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateUid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_notifications_notification_templates_template_uid");

                    b.Navigation("Person");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.System.NotificationSettings", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Auth.Person", "Person")
                        .WithOne()
                        .HasForeignKey("ViridiscaUi.Domain.Models.System.NotificationSettings", "PersonUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notification_settings_persons_person_uid");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Auth.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Auth.Person", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("PersonRoles");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Auth.Role", b =>
                {
                    b.Navigation("PersonRoles");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.AcademicPeriod", b =>
                {
                    b.Navigation("CourseInstances");

                    b.Navigation("Exams");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Assignment", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.CourseInstance", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Enrollments");

                    b.Navigation("Exams");

                    b.Navigation("Lessons");

                    b.Navigation("ScheduleSlots");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Curriculum", b =>
                {
                    b.Navigation("CurriculumSubjects");

                    b.Navigation("Groups");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Exam", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Lesson", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("LessonProgress");

                    b.Navigation("LessonProgresses");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Student", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Enrollments");

                    b.Navigation("ExamResults");

                    b.Navigation("Grades");

                    b.Navigation("LessonProgresses");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Subject", b =>
                {
                    b.Navigation("CourseInstances");

                    b.Navigation("CurriculumSubjects");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Teacher", b =>
                {
                    b.Navigation("CourseInstances");

                    b.Navigation("GradedMarks");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Library.LibraryResource", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.System.Department", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Subjects");

                    b.Navigation("Teachers");
                });
#pragma warning restore 612, 618
        }
    }
}
