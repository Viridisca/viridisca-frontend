// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ViridiscaUi.Infrastructure;

#nullable disable

namespace ViridiscaUi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250522234853_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Auth.Permission", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Uid")
                        .HasName("pk_permissions");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_permissions_name");

                    b.ToTable("permissions", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Auth.Role", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("RoleType")
                        .HasColumnType("integer")
                        .HasColumnName("role_type");

                    b.HasKey("Uid")
                        .HasName("pk_roles");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_roles_name");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Uid = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Системный администратор",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Administrator",
                            RoleType = 1
                        },
                        new
                        {
                            Uid = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Преподаватель",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Teacher",
                            RoleType = 4
                        },
                        new
                        {
                            Uid = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Студент",
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Student",
                            RoleType = 6
                        });
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Auth.RolePermission", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_at");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("PermissionUid")
                        .HasColumnType("uuid")
                        .HasColumnName("permission_uid");

                    b.Property<Guid?>("PermissionUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("permission_uid1");

                    b.Property<Guid>("RoleUid")
                        .HasColumnType("uuid")
                        .HasColumnName("role_uid");

                    b.Property<Guid?>("RoleUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("role_uid1");

                    b.HasKey("Uid")
                        .HasName("pk_role_permissions");

                    b.HasIndex("PermissionUid")
                        .HasDatabaseName("ix_role_permissions_permission_uid");

                    b.HasIndex("PermissionUid1")
                        .HasDatabaseName("ix_role_permissions_permission_uid1");

                    b.HasIndex("RoleUid1")
                        .HasDatabaseName("ix_role_permissions_role_uid1");

                    b.HasIndex("RoleUid", "PermissionUid")
                        .IsUnique()
                        .HasDatabaseName("ix_role_permissions_role_uid_permission_uid");

                    b.ToTable("role_permissions", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Auth.User", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_email_confirmed");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("middle_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("profile_image_url");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("Uid")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("ix_users_username");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Uid = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@viridisca.local",
                            FirstName = "Admin",
                            IsActive = true,
                            IsEmailConfirmed = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastName = "Viridisca",
                            MiddleName = "",
                            PasswordHash = "$2a$11$8T8P3PotQP8V8pzF8H3w9.VJgQnODklQ4jNxeJV8Y1ZXzlGc0zP4e",
                            PhoneNumber = "",
                            ProfileImageUrl = "",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Auth.UserRole", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime>("AssignedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("RoleUid")
                        .HasColumnType("uuid")
                        .HasColumnName("role_uid");

                    b.Property<Guid>("UserUid")
                        .HasColumnType("uuid")
                        .HasColumnName("user_uid");

                    b.Property<Guid?>("UserUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("user_uid1");

                    b.HasKey("Uid")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleUid")
                        .HasDatabaseName("ix_user_roles_role_uid");

                    b.HasIndex("UserUid1")
                        .HasDatabaseName("ix_user_roles_user_uid1");

                    b.HasIndex("UserUid", "RoleUid")
                        .IsUnique()
                        .HasDatabaseName("ix_user_roles_user_uid_role_uid");

                    b.ToTable("user_roles", (string)null);

                    b.HasData(
                        new
                        {
                            Uid = new Guid("55555555-5555-5555-5555-555555555555"),
                            AssignedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RoleUid = new Guid("11111111-1111-1111-1111-111111111111"),
                            UserUid = new Guid("44444444-4444-4444-4444-444444444444")
                        });
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Assignment", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<Guid>("CourseUid")
                        .HasColumnType("uuid")
                        .HasColumnName("course_uid");

                    b.Property<Guid?>("CourseUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("course_uid1");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_date");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<Guid?>("LessonUid")
                        .HasColumnType("uuid")
                        .HasColumnName("lesson_uid");

                    b.Property<Guid?>("LessonUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("lesson_uid1");

                    b.Property<double>("MaxScore")
                        .HasColumnType("double precision")
                        .HasColumnName("max_score");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Uid")
                        .HasName("pk_assignments");

                    b.HasIndex("CourseUid")
                        .HasDatabaseName("ix_assignments_course_uid");

                    b.HasIndex("CourseUid1")
                        .HasDatabaseName("ix_assignments_course_uid1");

                    b.HasIndex("LessonUid")
                        .HasDatabaseName("ix_assignments_lesson_uid");

                    b.HasIndex("LessonUid1")
                        .HasDatabaseName("ix_assignments_lesson_uid1");

                    b.ToTable("assignments", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Course", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Credits")
                        .HasColumnType("integer")
                        .HasColumnName("credits");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid?>("TeacherUid")
                        .HasColumnType("uuid")
                        .HasColumnName("teacher_uid");

                    b.Property<Guid?>("TeacherUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("teacher_uid1");

                    b.HasKey("Uid")
                        .HasName("pk_courses");

                    b.HasIndex("TeacherUid")
                        .HasDatabaseName("ix_courses_teacher_uid");

                    b.HasIndex("TeacherUid1")
                        .HasDatabaseName("ix_courses_teacher_uid1");

                    b.ToTable("courses", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Enrollment", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<Guid>("CourseUid")
                        .HasColumnType("uuid")
                        .HasColumnName("course_uid");

                    b.Property<Guid?>("CourseUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("course_uid1");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("EnrollmentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enrollment_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("StudentUid")
                        .HasColumnType("uuid")
                        .HasColumnName("student_uid");

                    b.Property<Guid?>("StudentUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("student_uid1");

                    b.HasKey("Uid")
                        .HasName("pk_enrollments");

                    b.HasIndex("CourseUid")
                        .HasDatabaseName("ix_enrollments_course_uid");

                    b.HasIndex("CourseUid1")
                        .HasDatabaseName("ix_enrollments_course_uid1");

                    b.HasIndex("StudentUid")
                        .HasDatabaseName("ix_enrollments_student_uid");

                    b.HasIndex("StudentUid1")
                        .HasDatabaseName("ix_enrollments_student_uid1");

                    b.ToTable("enrollments", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Grade", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean")
                        .HasColumnName("is_published");

                    b.Property<DateTime>("IssuedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("issued_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<Guid?>("LessonUid")
                        .HasColumnType("uuid")
                        .HasColumnName("lesson_uid");

                    b.Property<Guid?>("LessonUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("lesson_uid1");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_at");

                    b.Property<Guid>("StudentUid")
                        .HasColumnType("uuid")
                        .HasColumnName("student_uid");

                    b.Property<Guid?>("StudentUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("student_uid1");

                    b.Property<Guid>("SubjectUid")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_uid");

                    b.Property<Guid?>("SubjectUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_uid1");

                    b.Property<Guid>("TeacherUid")
                        .HasColumnType("uuid")
                        .HasColumnName("teacher_uid");

                    b.Property<Guid?>("TeacherUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("teacher_uid1");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<decimal>("Value")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("value");

                    b.HasKey("Uid")
                        .HasName("pk_grades");

                    b.HasIndex("LessonUid")
                        .HasDatabaseName("ix_grades_lesson_uid");

                    b.HasIndex("LessonUid1")
                        .HasDatabaseName("ix_grades_lesson_uid1");

                    b.HasIndex("StudentUid")
                        .HasDatabaseName("ix_grades_student_uid");

                    b.HasIndex("StudentUid1")
                        .HasDatabaseName("ix_grades_student_uid1");

                    b.HasIndex("SubjectUid")
                        .HasDatabaseName("ix_grades_subject_uid");

                    b.HasIndex("SubjectUid1")
                        .HasDatabaseName("ix_grades_subject_uid1");

                    b.HasIndex("TeacherUid")
                        .HasDatabaseName("ix_grades_teacher_uid");

                    b.HasIndex("TeacherUid1")
                        .HasDatabaseName("ix_grades_teacher_uid1");

                    b.ToTable("grades", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.GradeComment", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<Guid>("AuthorUid")
                        .HasColumnType("uuid")
                        .HasColumnName("author_uid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("GradeUid")
                        .HasColumnType("uuid")
                        .HasColumnName("grade_uid");

                    b.Property<Guid?>("GradeUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("grade_uid1");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Uid")
                        .HasName("pk_grade_comments");

                    b.HasIndex("GradeUid")
                        .HasDatabaseName("ix_grade_comments_grade_uid");

                    b.HasIndex("GradeUid1")
                        .HasDatabaseName("ix_grade_comments_grade_uid1");

                    b.ToTable("grade_comments", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.GradeRevision", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("GradeUid")
                        .HasColumnType("uuid")
                        .HasColumnName("grade_uid");

                    b.Property<Guid?>("GradeUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("grade_uid1");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("NewDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("new_description");

                    b.Property<decimal>("NewValue")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("new_value");

                    b.Property<string>("PreviousDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("previous_description");

                    b.Property<decimal>("PreviousValue")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("previous_value");

                    b.Property<string>("RevisionReason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("revision_reason");

                    b.Property<Guid>("TeacherUid")
                        .HasColumnType("uuid")
                        .HasColumnName("teacher_uid");

                    b.HasKey("Uid")
                        .HasName("pk_grade_revisions");

                    b.HasIndex("GradeUid")
                        .HasDatabaseName("ix_grade_revisions_grade_uid");

                    b.HasIndex("GradeUid1")
                        .HasDatabaseName("ix_grade_revisions_grade_uid1");

                    b.ToTable("grade_revisions", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Group", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CuratorUid")
                        .HasColumnType("uuid")
                        .HasColumnName("curator_uid");

                    b.Property<Guid>("DepartmentUid")
                        .HasColumnType("uuid")
                        .HasColumnName("department_uid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<int>("MaxStudents")
                        .HasColumnType("integer")
                        .HasColumnName("max_students");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Uid")
                        .HasName("pk_groups");

                    b.HasIndex("CuratorUid")
                        .HasDatabaseName("ix_groups_curator_uid");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Lesson", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<string>("CancellationReason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cancellation_reason");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<Guid>("GroupUid")
                        .HasColumnType("uuid")
                        .HasColumnName("group_uid");

                    b.Property<Guid?>("GroupUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("group_uid1");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_cancelled");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_completed");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<Guid?>("ModuleUid")
                        .HasColumnType("uuid")
                        .HasColumnName("module_uid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<Guid>("SubjectUid")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_uid");

                    b.Property<Guid?>("SubjectUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_uid1");

                    b.Property<Guid>("TeacherUid")
                        .HasColumnType("uuid")
                        .HasColumnName("teacher_uid");

                    b.Property<Guid?>("TeacherUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("teacher_uid1");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("topic");

                    b.HasKey("Uid")
                        .HasName("pk_lessons");

                    b.HasIndex("GroupUid")
                        .HasDatabaseName("ix_lessons_group_uid");

                    b.HasIndex("GroupUid1")
                        .HasDatabaseName("ix_lessons_group_uid1");

                    b.HasIndex("ModuleUid")
                        .HasDatabaseName("ix_lessons_module_uid");

                    b.HasIndex("SubjectUid")
                        .HasDatabaseName("ix_lessons_subject_uid");

                    b.HasIndex("SubjectUid1")
                        .HasDatabaseName("ix_lessons_subject_uid1");

                    b.HasIndex("TeacherUid")
                        .HasDatabaseName("ix_lessons_teacher_uid");

                    b.HasIndex("TeacherUid1")
                        .HasDatabaseName("ix_lessons_teacher_uid1");

                    b.ToTable("lessons", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Module", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<Guid>("CourseUid")
                        .HasColumnType("uuid")
                        .HasColumnName("course_uid");

                    b.Property<Guid?>("CourseUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("course_uid1");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.HasKey("Uid")
                        .HasName("pk_modules");

                    b.HasIndex("CourseUid")
                        .HasDatabaseName("ix_modules_course_uid");

                    b.HasIndex("CourseUid1")
                        .HasDatabaseName("ix_modules_course_uid1");

                    b.ToTable("modules", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Student", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("EmergencyContactName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("emergency_contact_name");

                    b.Property<string>("EmergencyContactPhone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("emergency_contact_phone");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enrollment_date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<DateTime?>("GraduationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("graduation_date");

                    b.Property<Guid?>("GroupUid")
                        .HasColumnType("uuid")
                        .HasColumnName("group_uid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("MedicalInformation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("medical_information");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("middle_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("student_code");

                    b.Property<Guid>("UserUid")
                        .HasColumnType("uuid")
                        .HasColumnName("user_uid");

                    b.HasKey("Uid")
                        .HasName("pk_students");

                    b.HasIndex("GroupUid")
                        .HasDatabaseName("ix_students_group_uid");

                    b.HasIndex("UserUid")
                        .IsUnique()
                        .HasDatabaseName("ix_students_user_uid");

                    b.ToTable("students", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.StudentParent", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("HasAccessToAttendance")
                        .HasColumnType("boolean")
                        .HasColumnName("has_access_to_attendance");

                    b.Property<bool>("HasAccessToGrades")
                        .HasColumnType("boolean")
                        .HasColumnName("has_access_to_grades");

                    b.Property<bool>("IsEmergencyContact")
                        .HasColumnType("boolean")
                        .HasColumnName("is_emergency_contact");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<Guid>("ParentUserUid")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_user_uid");

                    b.Property<int>("RelationType")
                        .HasColumnType("integer")
                        .HasColumnName("relation_type");

                    b.Property<Guid>("StudentUid")
                        .HasColumnType("uuid")
                        .HasColumnName("student_uid");

                    b.Property<Guid?>("StudentUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("student_uid1");

                    b.HasKey("Uid")
                        .HasName("pk_student_parents");

                    b.HasIndex("ParentUserUid")
                        .HasDatabaseName("ix_student_parents_parent_user_uid");

                    b.HasIndex("StudentUid1")
                        .HasDatabaseName("ix_student_parents_student_uid1");

                    b.HasIndex("StudentUid", "ParentUserUid")
                        .IsUnique()
                        .HasDatabaseName("ix_student_parents_student_uid_parent_user_uid");

                    b.ToTable("student_parents", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Subject", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Credits")
                        .HasColumnType("integer")
                        .HasColumnName("credits");

                    b.Property<Guid>("DepartmentUid")
                        .HasColumnType("uuid")
                        .HasColumnName("department_uid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<int>("LessonsPerWeek")
                        .HasColumnType("integer")
                        .HasColumnName("lessons_per_week");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Uid")
                        .HasName("pk_subjects");

                    b.ToTable("subjects", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Submission", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<Guid>("AssignmentUid")
                        .HasColumnType("uuid")
                        .HasColumnName("assignment_uid");

                    b.Property<Guid?>("AssignmentUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("assignment_uid1");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("feedback");

                    b.Property<Guid?>("GradedByUid")
                        .HasColumnType("uuid")
                        .HasColumnName("graded_by_uid");

                    b.Property<DateTime?>("GradedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("graded_date");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<double?>("Score")
                        .HasColumnType("double precision")
                        .HasColumnName("score");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("StudentUid")
                        .HasColumnType("uuid")
                        .HasColumnName("student_uid");

                    b.Property<Guid?>("StudentUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("student_uid1");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submission_date");

                    b.HasKey("Uid")
                        .HasName("pk_submissions");

                    b.HasIndex("AssignmentUid")
                        .HasDatabaseName("ix_submissions_assignment_uid");

                    b.HasIndex("AssignmentUid1")
                        .HasDatabaseName("ix_submissions_assignment_uid1");

                    b.HasIndex("GradedByUid")
                        .HasDatabaseName("ix_submissions_graded_by_uid");

                    b.HasIndex("StudentUid")
                        .HasDatabaseName("ix_submissions_student_uid");

                    b.HasIndex("StudentUid1")
                        .HasDatabaseName("ix_submissions_student_uid1");

                    b.ToTable("submissions", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Teacher", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<string>("AcademicDegree")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("academic_degree");

                    b.Property<string>("AcademicTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("academic_title");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("employee_code");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("hire_date");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("numeric")
                        .HasColumnName("hourly_rate");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("middle_name");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("specialization");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("termination_date");

                    b.Property<Guid>("UserUid")
                        .HasColumnType("uuid")
                        .HasColumnName("user_uid");

                    b.HasKey("Uid")
                        .HasName("pk_teachers");

                    b.HasIndex("UserUid")
                        .IsUnique()
                        .HasDatabaseName("ix_teachers_user_uid");

                    b.ToTable("teachers", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.TeacherGroup", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime>("AssignedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ended_at");

                    b.Property<Guid>("GroupUid")
                        .HasColumnType("uuid")
                        .HasColumnName("group_uid");

                    b.Property<Guid>("GroupUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("group_uid1");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsCurator")
                        .HasColumnType("boolean")
                        .HasColumnName("is_curator");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<Guid>("SubjectUid")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_uid");

                    b.Property<Guid>("SubjectUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_uid1");

                    b.Property<Guid>("TeacherUid")
                        .HasColumnType("uuid")
                        .HasColumnName("teacher_uid");

                    b.Property<Guid>("TeacherUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("teacher_uid1");

                    b.HasKey("Uid")
                        .HasName("pk_teacher_groups");

                    b.HasIndex("GroupUid")
                        .HasDatabaseName("ix_teacher_groups_group_uid");

                    b.HasIndex("GroupUid1")
                        .HasDatabaseName("ix_teacher_groups_group_uid1");

                    b.HasIndex("SubjectUid")
                        .HasDatabaseName("ix_teacher_groups_subject_uid");

                    b.HasIndex("SubjectUid1")
                        .HasDatabaseName("ix_teacher_groups_subject_uid1");

                    b.HasIndex("TeacherUid1")
                        .HasDatabaseName("ix_teacher_groups_teacher_uid1");

                    b.HasIndex("TeacherUid", "GroupUid", "SubjectUid")
                        .IsUnique()
                        .HasDatabaseName("ix_teacher_groups_teacher_uid_group_uid_subject_uid");

                    b.ToTable("teacher_groups", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.TeacherSubject", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<DateTime>("AssignedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeactivatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deactivated_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsMainTeacher")
                        .HasColumnType("boolean")
                        .HasColumnName("is_main_teacher");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<Guid>("SubjectUid")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_uid");

                    b.Property<Guid?>("SubjectUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_uid1");

                    b.Property<Guid>("TeacherUid")
                        .HasColumnType("uuid")
                        .HasColumnName("teacher_uid");

                    b.Property<Guid?>("TeacherUid1")
                        .HasColumnType("uuid")
                        .HasColumnName("teacher_uid1");

                    b.HasKey("Uid")
                        .HasName("pk_teacher_subjects");

                    b.HasIndex("SubjectUid")
                        .HasDatabaseName("ix_teacher_subjects_subject_uid");

                    b.HasIndex("SubjectUid1")
                        .HasDatabaseName("ix_teacher_subjects_subject_uid1");

                    b.HasIndex("TeacherUid1")
                        .HasDatabaseName("ix_teacher_subjects_teacher_uid1");

                    b.HasIndex("TeacherUid", "SubjectUid")
                        .IsUnique()
                        .HasDatabaseName("ix_teacher_subjects_teacher_uid_subject_uid");

                    b.ToTable("teacher_subjects", (string)null);
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Auth.RolePermission", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Auth.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_permissions_permission_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Auth.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionUid1")
                        .HasConstraintName("fk_role_permissions_permissions_permission_uid1");

                    b.HasOne("ViridiscaUi.Domain.Models.Auth.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_roles_role_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Auth.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleUid1")
                        .HasConstraintName("fk_role_permissions_roles_role_uid1");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Auth.UserRole", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Auth.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Auth.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserUid1")
                        .HasConstraintName("fk_user_roles_users_user_uid1");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Assignment", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assignments_courses_course_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Course", "Course")
                        .WithMany("Assignments")
                        .HasForeignKey("CourseUid1")
                        .HasConstraintName("fk_assignments_courses_course_uid1");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Lesson", null)
                        .WithMany()
                        .HasForeignKey("LessonUid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_assignments_lessons_lesson_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonUid1")
                        .HasConstraintName("fk_assignments_lessons_lesson_uid1");

                    b.Navigation("Course");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Course", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeacherUid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_courses_teachers_teacher_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherUid1")
                        .HasConstraintName("fk_courses_teachers_teacher_uid1");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Enrollment", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enrollments_courses_course_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseUid1")
                        .HasConstraintName("fk_enrollments_courses_course_uid1");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enrollments_students_student_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentUid1")
                        .HasConstraintName("fk_enrollments_students_student_uid1");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Grade", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.Lesson", null)
                        .WithMany()
                        .HasForeignKey("LessonUid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_grades_lessons_lesson_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Lesson", null)
                        .WithMany("Grades")
                        .HasForeignKey("LessonUid1")
                        .HasConstraintName("fk_grades_lessons_lesson_uid1");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_grades_students_student_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentUid1")
                        .HasConstraintName("fk_grades_students_student_uid1");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_grades_subjects_subject_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectUid1")
                        .HasConstraintName("fk_grades_subjects_subject_uid1");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeacherUid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_grades_teachers_teacher_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherUid1")
                        .HasConstraintName("fk_grades_teachers_teacher_uid1");

                    b.Navigation("Student");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.GradeComment", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.Grade", null)
                        .WithMany()
                        .HasForeignKey("GradeUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_grade_comments_grades_grade_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Grade", null)
                        .WithMany("Comments")
                        .HasForeignKey("GradeUid1")
                        .HasConstraintName("fk_grade_comments_grades_grade_uid1");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.GradeRevision", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.Grade", null)
                        .WithMany()
                        .HasForeignKey("GradeUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_grade_revisions_grades_grade_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Grade", null)
                        .WithMany("Revisions")
                        .HasForeignKey("GradeUid1")
                        .HasConstraintName("fk_grade_revisions_grades_grade_uid1");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Group", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.Teacher", "Curator")
                        .WithMany()
                        .HasForeignKey("CuratorUid")
                        .HasConstraintName("fk_groups_teachers_curator_uid");

                    b.Navigation("Curator");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Lesson", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupUid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_lessons_groups_group_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupUid1")
                        .HasConstraintName("fk_lessons_groups_group_uid1");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Module", null)
                        .WithMany("Lessons")
                        .HasForeignKey("ModuleUid")
                        .HasConstraintName("fk_lessons_modules_module_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lessons_subjects_subject_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectUid1")
                        .HasConstraintName("fk_lessons_subjects_subject_uid1");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeacherUid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_lessons_teachers_teacher_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherUid1")
                        .HasConstraintName("fk_lessons_teachers_teacher_uid1");

                    b.Navigation("Group");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Module", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_modules_courses_course_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Course", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseUid1")
                        .HasConstraintName("fk_modules_courses_course_uid1");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Student", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupUid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_students_groups_group_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Auth.User", null)
                        .WithOne("StudentProfile")
                        .HasForeignKey("ViridiscaUi.Domain.Models.Education.Student", "UserUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_students_users_user_uid");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.StudentParent", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("ParentUserUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_parents_users_parent_user_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_parents_students_student_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Student", null)
                        .WithMany("Parents")
                        .HasForeignKey("StudentUid1")
                        .HasConstraintName("fk_student_parents_students_student_uid1");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Submission", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.Assignment", null)
                        .WithMany()
                        .HasForeignKey("AssignmentUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_submissions_assignments_assignment_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Assignment", "Assignment")
                        .WithMany("Submissions")
                        .HasForeignKey("AssignmentUid1")
                        .HasConstraintName("fk_submissions_assignments_assignment_uid1");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Teacher", "GradedBy")
                        .WithMany()
                        .HasForeignKey("GradedByUid")
                        .HasConstraintName("fk_submissions_teachers_graded_by_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_submissions_students_student_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentUid1")
                        .HasConstraintName("fk_submissions_students_student_uid1");

                    b.Navigation("Assignment");

                    b.Navigation("GradedBy");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Teacher", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Auth.User", "User")
                        .WithOne("TeacherProfile")
                        .HasForeignKey("ViridiscaUi.Domain.Models.Education.Teacher", "UserUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teachers_users_user_uid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.TeacherGroup", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teacher_groups_groups_group_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupUid1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teacher_groups_groups_group_uid1");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teacher_groups_subjects_subject_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectUid1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teacher_groups_subjects_subject_uid1");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeacherUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teacher_groups_teachers_teacher_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherUid1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teacher_groups_teachers_teacher_uid1");

                    b.Navigation("Group");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.TeacherSubject", b =>
                {
                    b.HasOne("ViridiscaUi.Domain.Models.Education.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teacher_subjects_subjects_subject_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Subject", "Subject")
                        .WithMany("TeacherSubjects")
                        .HasForeignKey("SubjectUid1")
                        .HasConstraintName("fk_teacher_subjects_subjects_subject_uid1");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeacherUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teacher_subjects_teachers_teacher_uid");

                    b.HasOne("ViridiscaUi.Domain.Models.Education.Teacher", "Teacher")
                        .WithMany("Subjects")
                        .HasForeignKey("TeacherUid1")
                        .HasConstraintName("fk_teacher_subjects_teachers_teacher_uid1");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Auth.User", b =>
                {
                    b.Navigation("StudentProfile");

                    b.Navigation("TeacherProfile");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Assignment", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Course", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Enrollments");

                    b.Navigation("Modules");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Grade", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Revisions");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Lesson", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Module", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Student", b =>
                {
                    b.Navigation("Parents");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Subject", b =>
                {
                    b.Navigation("TeacherSubjects");
                });

            modelBuilder.Entity("ViridiscaUi.Domain.Models.Education.Teacher", b =>
                {
                    b.Navigation("Subjects");
                });
#pragma warning restore 612, 618
        }
    }
}
