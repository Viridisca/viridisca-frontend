using System;
using System.Collections.ObjectModel;
using Microsoft.Extensions.Logging;

namespace ViridiscaUi.Services.Interfaces;

/// <summary>
/// –¢–∏–ø—ã —Å—Ç–∞—Ç—É—Å-—Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
/// </summary>
public enum StatusMessageType
{
    Info,
    Warning,
    Error,
    Success,
    Debug,
    Trace
}

/// <summary>
/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å-—Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
/// </summary>
public interface IStatusService
{
    /// <summary>
    /// –ö–æ–ª–ª–µ–∫—Ü–∏—è —Å—Ç–∞—Ç—É—Å-—Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI
    /// </summary>
    ReadOnlyObservableCollection<StatusMessage> Messages { get; }

    /// <summary>
    /// –¢–µ–∫—É—â–µ–µ —Å—Ç–∞—Ç—É—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ
    /// </summary>
    StatusMessage? CurrentMessage { get; }

    /// <summary>
    /// –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    /// </summary>
    int TotalMessagesCount { get; }

    /// <summary>
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—à–∏–±–æ–∫
    /// </summary>
    int ErrorsCount { get; }

    /// <summary>
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    /// </summary>
    int WarningsCount { get; }

    /// <summary>
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    /// </summary>
    int InfoCount { get; }

    /// <summary>
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏
    /// </summary>
    int MaxMessagesCount { get; set; }

    /// <summary>
    /// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    /// </summary>
    void ShowInfo(string message, string? source = null);

    /// <summary>
    /// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    /// </summary>
    void ShowWarning(string message, string? source = null);

    /// <summary>
    /// –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
    /// </summary>
    void ShowError(string message, string? source = null);

    /// <summary>
    /// –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    /// </summary>
    void ShowSuccess(string message, string? source = null);

    /// <summary>
    /// –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    /// </summary>
    void AddMessage(LogLevel level, string message, string? source = null);

    /// <summary>
    /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    /// </summary>
    void Clear();

    /// <summary>
    /// –°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    /// </summary>
    event EventHandler<StatusMessage?> CurrentMessageChanged;

    /// <summary>
    /// –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    /// </summary>
    event EventHandler<StatusMessage> MessageAdded;
}

/// <summary>
/// –°—Ç–∞—Ç—É—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ
/// </summary>
public class StatusMessage
{
    public Guid Id { get; } = Guid.NewGuid();
    public DateTime Timestamp { get; init; } = DateTime.Now;
    public LogLevel Level { get; init; }
    public string Message { get; init; } = string.Empty;
    public string? Source { get; init; }
    public string? Category { get; init; }

    /// <summary>
    /// –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    /// </summary>
    public StatusMessageType Type => Level switch
    {
        LogLevel.Error or LogLevel.Critical => StatusMessageType.Error,
        LogLevel.Warning => StatusMessageType.Warning,
        LogLevel.Information => StatusMessageType.Info,
        LogLevel.Debug => StatusMessageType.Debug,
        LogLevel.Trace => StatusMessageType.Trace,
        _ => StatusMessageType.Info
    };

    /// <summary>
    /// –ò–∫–æ–Ω–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI
    /// </summary>
    public string Icon => Level switch
    {
        LogLevel.Error or LogLevel.Critical => "‚ùå",
        LogLevel.Warning => "‚ö†Ô∏è",
        LogLevel.Information => "‚ÑπÔ∏è",
        LogLevel.Debug => "üîç",
        LogLevel.Trace => "üìç",
        _ => "üìù"
    };

    /// <summary>
    /// –¶–≤–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI
    /// </summary>
    public string Color => Level switch
    {
        LogLevel.Error or LogLevel.Critical => "Red",
        LogLevel.Warning => "Orange",
        LogLevel.Information => "Blue",
        LogLevel.Debug => "Gray",
        LogLevel.Trace => "LightGray",
        _ => "Black"
    };

    /// <summary>
    /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    /// </summary>
    public string FormattedMessage => $"[{Timestamp:HH:mm:ss}] {(string.IsNullOrEmpty(Source) ? "" : $"[{Source}] ")}{Message}";

    /// <summary>
    /// –ö–æ–ø–∏—Ä—É–µ–º—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    /// </summary>
    public string CopyableText => $"{Timestamp:yyyy-MM-dd HH:mm:ss.fff} [{Level}] {(string.IsNullOrEmpty(Source) ? "" : $"[{Source}] ")}{Message}";
} 